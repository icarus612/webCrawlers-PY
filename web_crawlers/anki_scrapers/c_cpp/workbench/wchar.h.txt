<b>Wchar Function:</b> wint_t btowc(int <i>c</i>); | <b>Wchar function</b> used to determines whether c constitues a valid multibyte character in the initial shift state. 
<b>Wchar Function:</b> wint_t fgetwc(FILE *<i>stream</i>); | <b>Wchar function</b> used to reads the next multibyte character from the input stream pointed to by stream.  
<b>Wchar Function:</b> wchar_t *fgetws(wchar_t *<i>wcs</i>,  int <i>n</i>, FILE *<i>stream</i>); | <b>Wchar function</b> used to reads wide characters from the stream into the array pointed to by wcs. 
<b>Wchar Function:</b> wint_t fputwc(wchar_t <i>wc</i>,  FILE <i>*stream</i>); | <b>Wchar function</b> used to converts the wide character wc to a multibyte character and writes it to the output stream pointed to by  stream at the current position. 
<b>Wchar Function:</b> int fputws(const wchar_t *<i>wcs</i>, FILE  <i>*stream</i>); | <b>Wchar function</b> used to converts the wide-character string wcs to a multibyte-character string and writes it to stream as a multibyte character string. 
<b>Wchar Function:</b> int fwide(FILE <i>*stream</i>, int <i>mode</i>); | <b>Wchar function</b> used to determines the orientation of the stream pointed to by stream. 
<b>Wchar Function:</b> int fwprintf(FILE <i>*stream</i>, const wchar_t <i>*format</i>, <i>arg-list</i>); | <b>Wchar function</b> used to writes output to the stream pointed to by stream. 
<b>Wchar Function:</b> int fwscanf(FILE <i>*stream</i>, const wchar_t <i>*format</i>, <i>arg-list</i>) | <b>Wchar function</b> used to reads input from the stream pointed to by stream. 
<b>Wchar Function:</b> wint_t getwc(FILE <i>*stream</i>); | <b>Wchar function</b> used to reads the next multibyte character from  stream, converts it to a wide character and advances the associated file position indicator for stream. 
<b>Wchar Function:</b> wint_t getwchar(void); | <b>Wchar function</b> used to reads the next multibyte character from stdin, converts it to a wide character, and advances the associated file position indicator for stdin. 
<b>Wchar Function:</b> int mbrlen (const char *s, size_t n, mbstate_t *ps); | <b>Wchar function</b> used to determines the length of a multibyte character. (Restartable version of mblen.) 
<b>Wchar Function:</b> int mbrtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *ps); | <b>Wchar function</b> used to convert a multibyte character to a wide character (Restartable version of mbtowc.) 
<b>Wchar Function:</b> int mbsinit (const mbstate_t *ps); | <b>Wchar function</b> used to test state object *ps for initial state. 
<b>Wchar Function:</b> size_t mbsrtowc (wchar_t *dst, const char **src, size_t len, mbstate_t *ps); | <b>Wchar function</b> used to convert multibyte string to a wide character string. (Restartable version of mbstowcs.) 
<b>Wchar Function:</b> wint_t putwchar(wchar_t <i>wc</i>,  FILE <i>*stream</i>); | <b>Wchar function</b> used to converts the wide character wc to a multibyte character, and writes it to the stream at the current position. 
<b>Wchar Function:</b> wint_t putwchar(wchar_t <i>wc</i>); | <b>Wchar function</b> used to converts the wide character wc to a multibyte character and writes it to stdout. 
<b>Wchar Function:</b> int strfmon (char *s, size_t maxsize, const char *format, ...); | <b>Wchar function</b> used to converts monetary value to string. 
<b>Wchar Function:</b> int swprintf(wchar_t <i>*wcsbuffer</i>, size_t <i>n</i>, const wchar_t <i>*format</i>,  <i>arg-list</i>); | <b>Wchar function</b> used to formats and stores a series of wide characters and values into the wide-character buffer wcsbuffer. 
<b>Wchar Function:</b> int swscanf (const wchar_t <span class="ph synph"><span class="ph var">*buffer</span></span>, const wchar_t <span class="ph synph"><span class="ph var">*format</span></span>, <i>arg-list</i>) | <b>Wchar function</b> used to reads data from buffer into the locations given by arg-list. 
<b>Wchar Function:</b> wint_t ungetwc(wint_t <i>wc</i>, FILE <i>*stream</i>); | <b>Wchar function</b> used to pushes the wide character wc back onto the input stream. 
<b>Wchar Function:</b> int vfwprintf(FILE <i>*stream</i>, const wchar_t <i>*format</i>, <i>va_list arg</i>); | <b>Wchar function</b> used to equivalent to fwprintf, except that the variable argument list is replaced by arg. 
<b>Wchar Function:</b> int vswprintf(wchar_t <i>*wcsbuffer</i>,  size_t <i>n</i>, const wchar_t <i>*format</i>,  <i>va_list arg</i>); | <b>Wchar function</b> used to formats and stores a series of wide characters and values in the buffer wcsbuffer. 
<b>Wchar Function:</b> int vswscanf(const wchar_t <i>*buffer</i>, const wchar_t <i>*format</i>, <i>va_list arg_ptr</i>); | <b>Wchar function</b> used to reads wide data from a buffer into locations given by a variable number of arguments. 
<b>Wchar Function:</b> int vwprintf(const wchar_t <i>*format</i>, <i>va_list arg</i>); | <b>Wchar function</b> used to equivalent to wprintf, except that the variable argument list is replaced by arg.  
<b>Wchar Function:</b> int vwscanf(const wchar_t <i>*format</i>, <i>va_list arg_ptr</i>); | <b>Wchar function</b> used to reads wide data from stdin into locations given by a variable number of arguments. 
<b>Wchar Function:</b> int wcrtomb (char *s, wchar_t wchar, mbstate_t *pss); | <b>Wchar function</b> used to converts a wide character to a multibyte character. (Restartable version of wctomb.) 
<b>Wchar Function:</b> wchar_t *wcscat(wchar_t  <i>*string1</i>, const wchar_t  <i>*string2</i>); | <b>Wchar function</b> used to appends a copy of the string pointed to by string2 to the end of the string pointed to by string1. 
<b>Wchar Function:</b> wchar_t *wcschr(const wchar_t  <i>*string</i>, wchar_t  <i>character</i>); | <b>Wchar function</b> used to searches the wide-character string pointed to by string for the occurrence of character. 
<b>Wchar Function:</b> int wcscmp(const wchar_t  <i>*string1</i>, const wchar_t  <i>*string2</i>); | <b>Wchar function</b> used to compares two wide-character strings, *string1 and *string2. 
<b>Wchar Function:</b> int wcscoll (const wchar_t *wcs1, const wchar_t *wcs2); | <b>Wchar function</b> used to compares two wide-character strings using the collating sequence in the current locale. 
<b>Wchar Function:</b> wchar_t *wcscpy(wchar_t  <i>*string1</i>, const wchar_t  <i>*string2</i>); | <b>Wchar function</b> used to copies the contents of *string2 (including the ending wchar_t  null character) into *string1. 
<b>Wchar Function:</b> size_t wcscspn(const wchar_t  <i>*string1</i>, const wchar_t  <i>*string2</i>); | <b>Wchar function</b> used to determines the number of wchar_t  characters in the initial segment of the string pointed to by *string1 that do not appear in the string pointed to by *string2. 
<b>Wchar Function:</b> size_t wcsftime(wchar_t <i>*wdest</i>, size_t <i>maxsize</i>, const wchar_t <i>*format</i>,  const struct tm <i>*timeptr</i>); | <b>Wchar function</b> used to converts the time and date specification in the timeptr structure into a wide-character string. 
<b>Wchar Function:</b> size_t wcslen(const wchar_t  <i>*string</i>); | <b>Wchar function</b> used to computes the number of wide-characters in the string pointed to by string. 
<b>Wchar Function:</b> wchar_t *wcsncat(wchar_t  <i>*string1</i>, const wchar_t  <i>*string2</i>, size_t <i>count</i>); | <b>Wchar function</b> used to appends up to count wide characters from string2 to the end of string1, and appends a wchar_t null character to the result. 
<b>Wchar Function:</b> int wcsncmp(const wchar_t  <i>*string1</i>, const wchar_t  <i>*string2</i>, size_t <i>count</i>); | <b>Wchar function</b> used to compares up to count wide characters in string1 to  string2. 
<b>Wchar Function:</b> wchar_t *wcsncpy(wchar_t  <i>*string1</i>, const wchar_t  <i>*string2</i>, size_t <i>count</i>); | <b>Wchar function</b> used to copies up to count wide characters from string2 to  string1. 
<b>Wchar Function:</b> wchar_t *wcspbrk(const wchar_t  <i>*string1</i>, const wchar_t  <i>*string2</i>); | <b>Wchar function</b> used to locates the first occurrence in the string pointed to by string1 of any wide characters from the string pointed to by string2. 
<b>Wchar Function:</b> wchar_t *wcsptime ( const wchar_t *buf, const wchar_t *format, struct tm *tm ); | <b>Wchar function</b> used to date and time conversion. Equivalent to strptime(), except that it uses wide characters. 
<b>Wchar Function:</b> wchar_t *wcsrchr(const wchar_t  <i>*string</i>, wchar_t  <i>character</i>); | <b>Wchar function</b> used to locates the last occurrence of  character in the string pointed to by string. 
<b>Wchar Function:</b> size_t wcsrtombs (char *dst, const wchar_t **src, size_t len, mbstate_t *ps); | <b>Wchar function</b> used to converts wide character string to multibyte string. (Restartable version of wcstombs.) 
<b>Wchar Function:</b> size_t wcsspn(const wchar_t <i>*string1</i>, const wchar_t <i>*string2</i>); | <b>Wchar function</b> used to computes the number of wide characters in the initial segment of the string pointed to by string1, which consists entirely of wide characters from the string pointed to by string2. 
<b>Wchar Function:</b> wchar_t *wcsstr(const wchar_t <i>*wcs1</i>, const wchar_t <i>*wcs2</i>); | <b>Wchar function</b> used to locates the first occurrence of wcs2  in wcs1. 
<b>Wchar Function:</b> double wcstod(const wchar_t <i>*nptr</i>, wchar_t <i>**endptr</i>); | <b>Wchar function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a double value. 
<b>Wchar Function:</b> _Decimal32 wcstod32(const wchar_t <i>*nptr</i>, wchar_t <i>**endptr</i>); | <b>Wchar function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a single-precision decimal floating-point value. 
<b>Wchar Function:</b> _Decimal64 wcstod64(const wchar_t <i>*nptr</i>, wchar_t <i>**endptr</i>); | <b>Wchar function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a double-precision decimal floating-point value. 
<b>Wchar Function:</b> _Decimal128 wcstod128(const wchar_t <i>*nptr</i>, wchar_t <i>**endptr</i>); | <b>Wchar function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a quad-precision decimal floating-point value. 
<b>Wchar Function:</b> float wcstof(const wchar_t <i>*nptr</i>, wchar_t <i>**endptr</i>); | <b>Wchar function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a float value. 
<b>Wchar Function:</b> wchar_t *wcstok(wchar_t <i>*wcs1</i>, const wchar_t <i>*wcs2</i>, wchar_t <i>**ptr</i>) | <b>Wchar function</b> used to breaks wcs1 into a sequence of tokens, each of which is delimited by a wide character from the wide string pointed to by wcs2. 
<b>Wchar Function:</b> long int wcstol(const wchar_t <i>*nptr</i>, wchar_t <i>**endptr</i>, int <i>base</i>); | <b>Wchar function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a long integer value. 
<b>Wchar Function:</b> long double wcstold(const wchar_t <i>*nptr</i>, wchar_t <i>**endptr</i>); | <b>Wchar function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a long double value. 
<b>Wchar Function:</b> unsigned long int wcstoul(const wchar_t  <i>*nptr</i>, wchar_t <i>**endptr</i>, int  <i>base</i>); | <b>Wchar function</b> used to converts the initial portion of the wide-character string pointed to by nptr to an unsigned long integer value. 
<b>Wchar Function:</b> size_t wcsxfrm (wchar_t <i>*wcs1</i>, const wchar_t <i>*wcs2</i>, size_t <i>n</i>); | <b>Wchar function</b> used to transforms a wide-character string to values which represent character collating weights and places the resulting wide-character string into an array. 
<b>Wchar Function:</b> int wctob(wint_t <i>wc</i>); | <b>Wchar function</b> used to determines whether wc corresponds to a member of the extended character set whose multibyte character representation is a single byte when in the initial shift state. 
<b>Wchar Function:</b> wctype_t wctype (const char  <i>*property</i>); | <b>Wchar function</b> used to obtains handle for character property classification. 
<b>Wchar Function:</b> int wcswidth(const wchar_t   <i>*pwcs</i>, size_t <i>n</i>); | <b>Wchar function</b> used to determine the display width of a wide character string. 
<b>Wchar Function:</b> wchar_t *wmemchr(const wchar_t <i>*s</i>, wchar_t <i>c</i>, size_t <i>n</i>); | <b>Wchar function</b> used to locates the first occurrence of c in the initial n wide characters of the object pointed to by  s. 
<b>Wchar Function:</b> int wmemcmp(const wchar_t <i>*s1</i>, const wchar_t <i>*s2</i>, size_t <i>n</i>); | <b>Wchar function</b> used to compares the first n wide characters of the object pointed to by s1 to the first  n characters of the object pointed to by s2. 
<b>Wchar Function:</b> wchar_t *wmemcpy(wchar_t <i>*s1</i>, const wchar_t <i>*s2</i>, size_t <i>n</i>); | <b>Wchar function</b> used to copies n wide characters from the object pointed to by s2 to the object pointed to by  s1. 
<b>Wchar Function:</b> wchar_t *wmemmove(wchar_t <i>*s1</i>, const wchar_t <i>*s2</i>, size_t <i>n</i>); | <b>Wchar function</b> used to copies n wide characters from the object pointed to by s2 to the object pointed to by  s1. 
<b>Wchar Function:</b> wchar_t *wmemset(wchar_t <i>*s</i>, wchar_t <i>c</i>, size_t <i>n</i>); | <b>Wchar function</b> used to copies the value of c into each of the first n wide characters of the object pointed to by s. 
<b>Wchar Function:</b> int wprintf(const wchar_t  <i>*format</i>,  <i>arg-list</i>); | <b>Wchar function</b> used to equivalent to fwprintf with the argument stdout interposed before the arguments to wprintf. 
<b>Wchar Function:</b> int wscanf(const wchar_t  <i>*format</i>,  <i>arg-list</i>); | <b>Wchar function</b> used to equivalent to fwscanf with the argument stdin interposed before the arguments of wscanf. 
