<b>Standard Library Function:</b> ['btowc(int'] | <b>Standard library function</b> used to determines whether c constitues a valid multibyte character in the initial shift state.. | wint_t btowc(int c); 
<b>Standard Library Function:</b> ['fgetwc(FILE'] | <b>Standard library function</b> used to reads the next multibyte character from the input stream pointed to by stream. . | wint_t fgetwc(FILE *stream); 
<b>Standard Library Function:</b> ['*fgetws(wchar_t', '', 'FILE'] | <b>Standard library function</b> used to reads wide characters from the stream into the array pointed to by wcs.. | wchar_t *fgetws(wchar_t *wcs,  int n, FILE *stream); 
<b>Standard Library Function:</b> ['fputwc(wchar_t', ''] | <b>Standard library function</b> used to converts the wide character wc to a multibyte character and writes it to the output stream pointed to by  stream at the current position.. | wint_t fputwc(wchar_t wc,  FILE *stream); 
<b>Standard Library Function:</b> ['fputws(const', 'FILE'] | <b>Standard library function</b> used to converts the wide-character string wcs to a multibyte-character string and writes it to stream as a multibyte character string.. | int fputws(const wchar_t *wcs, FILE  *stream); 
<b>Standard Library Function:</b> ['fwide(FILE', 'int'] | <b>Standard library function</b> used to determines the orientation of the stream pointed to by stream.. | int fwide(FILE *stream, int mode); 
<b>Standard Library Function:</b> ['fwprintf(FILE', 'const', 'arg-list);'] | <b>Standard library function</b> used to writes output to the stream pointed to by stream.. | int fwprintf(FILE *stream, const wchar_t *format, arg-list); 
<b>Standard Library Function:</b> ['fwscanf(FILE', 'const', 'arg-list)'] | <b>Standard library function</b> used to reads input from the stream pointed to by stream.. | int fwscanf(FILE *stream, const wchar_t *format, arg-list) 
<b>Standard Library Function:</b> ['getwc(FILE'] | <b>Standard library function</b> used to reads the next multibyte character from  stream, converts it to a wide character and advances the associated file position indicator for stream.. | wint_t getwc(FILE *stream); 
<b>Standard Library Function:</b> ['getwchar(void);'] | <b>Standard library function</b> used to reads the next multibyte character from stdin, converts it to a wide character, and advances the associated file position indicator for stdin.. | wint_t getwchar(void); 
<b>Standard Library Function:</b> ['mbrlen', 'size_t', 'mbstate_t'] | <b>Standard library function</b> used to determines the length of a multibyte character. (Restartable version of mblen.). | int mbrlen (const char *s, size_t n, mbstate_t *ps); 
<b>Standard Library Function:</b> ['mbrtowc', 'const', 'size_t', 'mbstate_t'] | <b>Standard library function</b> used to convert a multibyte character to a wide character (Restartable version of mbtowc.). | int mbrtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *ps); 
<b>Standard Library Function:</b> ['mbsinit'] | <b>Standard library function</b> used to test state object *ps for initial state.. | int mbsinit (const mbstate_t *ps); 
<b>Standard Library Function:</b> ['mbsrtowc', 'const', 'size_t', 'mbstate_t'] | <b>Standard library function</b> used to convert multibyte string to a wide character string. (Restartable version of mbstowcs.). | size_t mbsrtowc (wchar_t *dst, const char **src, size_t len, mbstate_t *ps); 
<b>Standard Library Function:</b> ['putwchar(wchar_t', ''] | <b>Standard library function</b> used to converts the wide character wc to a multibyte character, and writes it to the stream at the current position.. | wint_t putwchar(wchar_t wc,  FILE *stream); 
<b>Standard Library Function:</b> ['putwchar(wchar_t'] | <b>Standard library function</b> used to converts the wide character wc to a multibyte character and writes it to stdout.. | wint_t putwchar(wchar_t wc); 
<b>Standard Library Function:</b> ['strfmon', 'size_t', 'const', '...);'] | <b>Standard library function</b> used to converts monetary value to string.. | int strfmon (char *s, size_t maxsize, const char *format, ...); 
<b>Standard Library Function:</b> ['swprintf(wchar_t', 'size_t', 'const', ''] | <b>Standard library function</b> used to formats and stores a series of wide characters and values into the wide-character buffer wcsbuffer.. | int swprintf(wchar_t *wcsbuffer, size_t n, const wchar_t *format,  arg-list); 
<b>Standard Library Function:</b> ['swscanf', 'const', 'arg-list)'] | <b>Standard library function</b> used to reads data from buffer into the locations given by arg-list.. | int swscanf (const wchar_t *buffer, const wchar_t *format, arg-list) 
<b>Standard Library Function:</b> ['ungetwc(wint_t', 'FILE'] | <b>Standard library function</b> used to pushes the wide character wc back onto the input stream.. | wint_t ungetwc(wint_t wc, FILE *stream); 
<b>Standard Library Function:</b> ['vfwprintf(FILE', 'const', 'va_list'] | <b>Standard library function</b> used to equivalent to fwprintf, except that the variable argument list is replaced by arg.. | int vfwprintf(FILE *stream, const wchar_t *format, va_list arg); 
<b>Standard Library Function:</b> ['vswprintf(wchar_t', '', 'const', ''] | <b>Standard library function</b> used to formats and stores a series of wide characters and values in the buffer wcsbuffer.. | int vswprintf(wchar_t *wcsbuffer,  size_t n, const wchar_t *format,  va_list arg); 
<b>Standard Library Function:</b> ['vswscanf(const', 'const', 'va_list'] | <b>Standard library function</b> used to reads wide data from a buffer into locations given by a variable number of arguments.. | int vswscanf(const wchar_t *buffer, const wchar_t *format, va_list arg_ptr); 
<b>Standard Library Function:</b> ['vwprintf(const', 'va_list'] | <b>Standard library function</b> used to equivalent to wprintf, except that the variable argument list is replaced by arg. . | int vwprintf(const wchar_t *format, va_list arg); 
<b>Standard Library Function:</b> ['vwscanf(const', 'va_list'] | <b>Standard library function</b> used to reads wide data from stdin into locations given by a variable number of arguments.. | int vwscanf(const wchar_t *format, va_list arg_ptr); 
<b>Standard Library Function:</b> ['wcrtomb', 'wchar_t', 'mbstate_t'] | <b>Standard library function</b> used to converts a wide character to a multibyte character. (Restartable version of wctomb.). | int wcrtomb (char *s, wchar_t wchar, mbstate_t *pss); 
<b>Standard Library Function:</b> ['*wcscat(wchar_t', 'const'] | <b>Standard library function</b> used to appends a copy of the string pointed to by string2 to the end of the string pointed to by string1.. | wchar_t *wcscat(wchar_t  *string1, const wchar_t  *string2); 
<b>Standard Library Function:</b> ['*wcschr(const', 'wchar_t'] | <b>Standard library function</b> used to searches the wide-character string pointed to by string for the occurrence of character.. | wchar_t *wcschr(const wchar_t  *string, wchar_t  character); 
<b>Standard Library Function:</b> ['wcscmp(const', 'const'] | <b>Standard library function</b> used to compares two wide-character strings, *string1 and *string2.. | int wcscmp(const wchar_t  *string1, const wchar_t  *string2); 
<b>Standard Library Function:</b> ['wcscoll', 'const'] | <b>Standard library function</b> used to compares two wide-character strings using the collating sequence in the current locale.. | int wcscoll (const wchar_t *wcs1, const wchar_t *wcs2); 
<b>Standard Library Function:</b> ['*wcscpy(wchar_t', 'const'] | <b>Standard library function</b> used to copies the contents of *string2 (including the ending wchar_t  null character) into *string1.. | wchar_t *wcscpy(wchar_t  *string1, const wchar_t  *string2); 
<b>Standard Library Function:</b> ['wcscspn(const', 'const'] | <b>Standard library function</b> used to determines the number of wchar_t  characters in the initial segment of the string pointed to by *string1 that do not appear in the string pointed to by *string2.. | size_t wcscspn(const wchar_t  *string1, const wchar_t  *string2); 
<b>Standard Library Function:</b> ['wcsftime(wchar_t', 'size_t', 'const', ''] | <b>Standard library function</b> used to converts the time and date specification in the timeptr structure into a wide-character string.. | size_t wcsftime(wchar_t *wdest, size_t maxsize, const wchar_t *format,  const struct tm *timeptr); 
<b>Standard Library Function:</b> ['wcslen(const'] | <b>Standard library function</b> used to computes the number of wide-characters in the string pointed to by string.. | size_t wcslen(const wchar_t  *string); 
<b>Standard Library Function:</b> ['*wcsncat(wchar_t', 'const', 'size_t'] | <b>Standard library function</b> used to appends up to count wide characters from string2 to the end of string1, and appends a wchar_t null character to the result.. | wchar_t *wcsncat(wchar_t  *string1, const wchar_t  *string2, size_t count); 
<b>Standard Library Function:</b> ['wcsncmp(const', 'const', 'size_t'] | <b>Standard library function</b> used to compares up to count wide characters in string1 to  string2.. | int wcsncmp(const wchar_t  *string1, const wchar_t  *string2, size_t count); 
<b>Standard Library Function:</b> ['*wcsncpy(wchar_t', 'const', 'size_t'] | <b>Standard library function</b> used to copies up to count wide characters from string2 to  string1.. | wchar_t *wcsncpy(wchar_t  *string1, const wchar_t  *string2, size_t count); 
<b>Standard Library Function:</b> ['*wcspbrk(const', 'const'] | <b>Standard library function</b> used to locates the first occurrence in the string pointed to by string1 of any wide characters from the string pointed to by string2.. | wchar_t *wcspbrk(const wchar_t  *string1, const wchar_t  *string2); 
<b>Standard Library Function:</b> ['*wcsptime', 'const', 'struct'] | <b>Standard library function</b> used to date and time conversion. Equivalent to strptime(), except that it uses wide characters.. | wchar_t *wcsptime ( const wchar_t *buf, const wchar_t *format, struct tm *tm ); 
<b>Standard Library Function:</b> ['*wcsrchr(const', 'wchar_t'] | <b>Standard library function</b> used to locates the last occurrence of  character in the string pointed to by string.. | wchar_t *wcsrchr(const wchar_t  *string, wchar_t  character); 
<b>Standard Library Function:</b> ['wcsrtombs', 'const', 'size_t', 'mbstate_t'] | <b>Standard library function</b> used to converts wide character string to multibyte string. (Restartable version of wcstombs.). | size_t wcsrtombs (char *dst, const wchar_t **src, size_t len, mbstate_t *ps); 
<b>Standard Library Function:</b> ['wcsspn(const', 'const'] | <b>Standard library function</b> used to computes the number of wide characters in the initial segment of the string pointed to by string1, which consists entirely of wide characters from the string pointed to by string2.. | size_t wcsspn(const wchar_t *string1, const wchar_t *string2); 
<b>Standard Library Function:</b> ['*wcsstr(const', 'const'] | <b>Standard library function</b> used to locates the first occurrence of wcs2  in wcs1.. | wchar_t *wcsstr(const wchar_t *wcs1, const wchar_t *wcs2); 
<b>Standard Library Function:</b> ['wcstod(const', 'wchar_t'] | <b>Standard library function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a double value.. | double wcstod(const wchar_t *nptr, wchar_t **endptr); 
<b>Standard Library Function:</b> ['wcstod32(const', 'wchar_t'] | <b>Standard library function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a single-precision decimal floating-point value.. | _Decimal32 wcstod32(const wchar_t *nptr, wchar_t **endptr); 
<b>Standard Library Function:</b> ['wcstod64(const', 'wchar_t'] | <b>Standard library function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a double-precision decimal floating-point value.. | _Decimal64 wcstod64(const wchar_t *nptr, wchar_t **endptr); 
<b>Standard Library Function:</b> ['wcstod128(const', 'wchar_t'] | <b>Standard library function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a quad-precision decimal floating-point value.. | _Decimal128 wcstod128(const wchar_t *nptr, wchar_t **endptr); 
<b>Standard Library Function:</b> ['wcstof(const', 'wchar_t'] | <b>Standard library function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a float value.. | float wcstof(const wchar_t *nptr, wchar_t **endptr); 
<b>Standard Library Function:</b> ['*wcstok(wchar_t', 'const', 'wchar_t'] | <b>Standard library function</b> used to breaks wcs1 into a sequence of tokens, each of which is delimited by a wide character from the wide string pointed to by wcs2.. | wchar_t *wcstok(wchar_t *wcs1, const wchar_t *wcs2, wchar_t **ptr) 
<b>Standard Library Function:</b> ['int', 'wchar_t', 'int'] | <b>Standard library function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a long integer value.. | long int wcstol(const wchar_t *nptr, wchar_t **endptr, int base); 
<b>Standard Library Function:</b> ['double', 'wchar_t'] | <b>Standard library function</b> used to converts the initial portion of the wide-character string pointed to by nptr to a long double value.. | long double wcstold(const wchar_t *nptr, wchar_t **endptr); 
<b>Standard Library Function:</b> ['long', 'wchar_t', 'int'] | <b>Standard library function</b> used to converts the initial portion of the wide-character string pointed to by nptr to an unsigned long integer value.. | unsigned long int wcstoul(const wchar_t  *nptr, wchar_t **endptr, int  base); 
<b>Standard Library Function:</b> ['wcsxfrm', 'const', 'size_t'] | <b>Standard library function</b> used to transforms a wide-character string to values which represent character collating weights and places the resulting wide-character string into an array.. | size_t wcsxfrm (wchar_t *wcs1, const wchar_t *wcs2, size_t n); 
<b>Standard Library Function:</b> ['wctob(wint_t'] | <b>Standard library function</b> used to determines whether wc corresponds to a member of the extended character set whose multibyte character representation is a single byte when in the initial shift state.. | int wctob(wint_t wc); 
<b>Standard Library Function:</b> ['wctype'] | <b>Standard library function</b> used to obtains handle for character property classification.. | wctype_t wctype (const char  *property); 
<b>Standard Library Function:</b> ['wcswidth(const', 'size_t'] | <b>Standard library function</b> used to determine the display width of a wide character string.. | int wcswidth(const wchar_t   *pwcs, size_t n); 
<b>Standard Library Function:</b> ['*wmemchr(const', 'wchar_t', 'size_t'] | <b>Standard library function</b> used to locates the first occurrence of c in the initial n wide characters of the object pointed to by  s.. | wchar_t *wmemchr(const wchar_t *s, wchar_t c, size_t n); 
<b>Standard Library Function:</b> ['wmemcmp(const', 'const', 'size_t'] | <b>Standard library function</b> used to compares the first n wide characters of the object pointed to by s1 to the first  n characters of the object pointed to by s2.. | int wmemcmp(const wchar_t *s1, const wchar_t *s2, size_t n); 
<b>Standard Library Function:</b> ['*wmemcpy(wchar_t', 'const', 'size_t'] | <b>Standard library function</b> used to copies n wide characters from the object pointed to by s2 to the object pointed to by  s1.. | wchar_t *wmemcpy(wchar_t *s1, const wchar_t *s2, size_t n); 
<b>Standard Library Function:</b> ['*wmemmove(wchar_t', 'const', 'size_t'] | <b>Standard library function</b> used to copies n wide characters from the object pointed to by s2 to the object pointed to by  s1.. | wchar_t *wmemmove(wchar_t *s1, const wchar_t *s2, size_t n); 
<b>Standard Library Function:</b> ['*wmemset(wchar_t', 'wchar_t', 'size_t'] | <b>Standard library function</b> used to copies the value of c into each of the first n wide characters of the object pointed to by s.. | wchar_t *wmemset(wchar_t *s, wchar_t c, size_t n); 
<b>Standard Library Function:</b> ['wprintf(const', ''] | <b>Standard library function</b> used to equivalent to fwprintf with the argument stdout interposed before the arguments to wprintf.. | int wprintf(const wchar_t  *format,  arg-list); 
<b>Standard Library Function:</b> ['wscanf(const', ''] | <b>Standard library function</b> used to equivalent to fwscanf with the argument stdin interposed before the arguments of wscanf.. | int wscanf(const wchar_t  *format,  arg-list); 
