<b>Standard Library Function:</b> char *asctime(const struct tm *time); | <b>Standard library function</b> used to converts the time that is
stored as a structure to a character string.. 
<b>Standard Library Function:</b> char *asctime_r (const struct tm
*tm, char *buf); | <b>Standard library function</b> used to converts tm that
is stored as a structure to a character string. (Restartable version
of asctime.). 
<b>Standard Library Function:</b> clock_t clock(void); | <b>Standard library function</b> used to returns the processor time that has
elapsed since the job was started.. 
<b>Standard Library Function:</b> char *ctime(const time_t *time); | <b>Standard library function</b> used to converts time to a character
string.. 
<b>Standard Library Function:</b> char *ctime64(const time64_t *time); | <b>Standard library function</b> used to converts time to a character
string.. 
<b>Standard Library Function:</b> char *ctime_r(const time_t *time,
char *buf); | <b>Standard library function</b> used to converts time to a character
string. (Restartable version of ctime.). 
<b>Standard Library Function:</b> char *ctime64_r(const time64_t *time,
char *buf); | <b>Standard library function</b> used to converts time to a character
string. (Restartable version of ctime64.). 
<b>Standard Library Function:</b> double difftime(time_t time2,
time_t time1); | <b>Standard library function</b> used to computes the difference between time2 and time1.. 
<b>Standard Library Function:</b> double difftime64(time64_t time2,
time64_t time1); | <b>Standard library function</b> used to computes the difference between time2 and time1.. 
<b>Standard Library Function:</b> struct tm *gmtime(const time_t *time); | <b>Standard library function</b> used to converts a time value to a
structure of type tm.. 
<b>Standard Library Function:</b> struct tm *gmtime64(const time64_t
*time); | <b>Standard library function</b> used to converts a time value to a
structure of type tm.. 
<b>Standard Library Function:</b> struct tm *gmtime_r (const time_t
*time, struct tm *result); | <b>Standard library function</b> used to converts a time value
to a structure of type tm. (Restartable version of gmtime.). 
<b>Standard Library Function:</b> struct tm *gmtime64_r (const time64_t
*time, struct tm *result); | <b>Standard library function</b> used to converts a time value
to a structure of type tm. (Restartable version of gmtime64.). 
<b>Standard Library Function:</b> struct tm *localtime(const time_t
*timeval); | <b>Standard library function</b> used to converts timeval to a structure
of type tm.. 
<b>Standard Library Function:</b> struct tm *localtime64(const time64_t
*timeval); | <b>Standard library function</b> used to converts timeval to a structure
of type tm.. 
<b>Standard Library Function:</b> struct tm *localtime_r (const time_t
*timeval, struct tm *result); | <b>Standard library function</b> used to converts a time value
to a structure of type tm. (Restartable
version of localtime.). 
<b>Standard Library Function:</b> struct tm *localtime64_r (const time64_t
*timeval, struct tm *result); | <b>Standard library function</b> used to converts a time value
to a structure of type tm. (Restartable
version of localtime64.). 
<b>Standard Library Function:</b> time_t mktime(struct tm *time); | <b>Standard library function</b> used to converts local time into calendar
time.. 
<b>Standard Library Function:</b> time64_t mktime64(struct tm *time); | <b>Standard library function</b> used to converts local time into calendar
time.. 
<b>Standard Library Function:</b> size_t strftime (char *dest,
size_t maxsize, const char *format, const struct tm
*timeptr); | <b>Standard library function</b> used to stores characters in an array pointed
to by dest, according to the string determined by format.. 
<b>Standard Library Function:</b> char *strptime (const char *buf,
const char *format, struct tm *tm); | <b>Standard library function</b> used to date and time conversion. 
<b>Standard Library Function:</b> time_t time(time_t *timeptr); | <b>Standard library function</b> used to returns the current calendar time.. 
<b>Standard Library Function:</b> time64_t time64(time64_t *timeptr); | <b>Standard library function</b> used to returns the current calendar time.. 
