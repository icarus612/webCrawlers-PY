<b>Math Function:</b> double acos(double <i>x</i>); | <b>Math function</b> used to calculates the arc cosine of x. 
<b>Math Function:</b> double asin(double <i>x</i>); | <b>Math function</b> used to calculates the arc sine of x. 
<b>Math Function:</b> double atan(double <i>x</i>); | <b>Math function</b> used to calculates the arc tangent of x. 
<b>Math Function:</b> double atan2(double <i>y</i>, double <i>x</i>); | <b>Math function</b> used to calculates the arc tangent of y/x. 
<b>Math Function:</b> double ceil(double <i>x</i>); | <b>Math function</b> used to calculates the double value representing the smallest integer that is greater than or equal to x. 
<b>Math Function:</b> double cos(double <i>x</i>); | <b>Math function</b> used to calculates the cosine of x. 
<b>Math Function:</b> double cosh(double <i>x</i>); | <b>Math function</b> used to calculates the hyperbolic cosine of x. 
<b>Math Function:</b> double erf(double <i>x</i>); | <b>Math function</b> used to calculates the error function of  x. 
<b>Math Function:</b> double erfc(double <i>x</i>); | <b>Math function</b> used to calculates the error function for large values of x. 
<b>Math Function:</b> double exp(double <i>x</i>); | <b>Math function</b> used to calculates the exponential function of a floating-point argument x. 
<b>Math Function:</b> double fabs(double <i>x</i>); | <b>Math function</b> used to calculates the absolute value of a floating-point argument x. 
<b>Math Function:</b> double floor(double <i>x</i>); | <b>Math function</b> used to calculates the floating-point value representing the largest integer less than or equal to x. 
<b>Math Function:</b> double fmod(double <i>x</i>, double <i>y</i>); | <b>Math function</b> used to calculates the floating-point remainder of x/y. 
<b>Math Function:</b> double frexp(double <i>x</i>, int *<i>expptr</i>); | <b>Math function</b> used to separates a floating-point number into its mantissa and exponent. 
<b>Math Function:</b> double gamma(double <i>x</i>); | <b>Math function</b> used to computes the Gamma Function 
<b>Math Function:</b> double hypot(double <i>side1</i>, double <i>side2</i>); | <b>Math function</b> used to calculates the hypotenuse of a right-angled triangle with sides of length side1 and side2. 
<b>Math Function:</b> double j0(double <i>x</i>); | <b>Math function</b> used to calculates the Bessel function value of the first kind of order 0. 
<b>Math Function:</b> double j1(double <i>x</i>); | <b>Math function</b> used to calculates the Bessel function value of the first kind of order 1. 
<b>Math Function:</b> double jn(int <i>n</i>, double <i>x</i>); | <b>Math function</b> used to calculates the Bessel function value of the first kind of order n. 
<b>Math Function:</b> double ldexp(double <i>x</i>, int <i>exp</i>); | <b>Math function</b> used to returns the value of x multiplied by (2 to the power of exp). 
<b>Math Function:</b> double log(double <i>x</i>); | <b>Math function</b> used to calculates the natural logarithm of x. 
<b>Math Function:</b> double log10(double <i>x</i>); | <b>Math function</b> used to calculates the base 10 logarithm of x. 
<b>Math Function:</b> double modf(double <i>x</i>, double *<i>intptr</i>); | <b>Math function</b> used to breaks down the floating-point value x into fractional and integral parts. 
<b>Math Function:</b> double nextafter(double <i>x</i>, double <i>y</i>); | <b>Math function</b> used to calculates the next representable value after x in the direction of y. 
<b>Math Function:</b> long double nextafterl(long double <i>x</i>, long double <i>y</i>); | <b>Math function</b> used to calculates the next representable value after x in the direction of y. 
<b>Math Function:</b> double nexttoward(double <i>x</i>, long double <i>y</i>); | <b>Math function</b> used to calculates the next representable value after x in the direction of y. 
<b>Math Function:</b> long double nexttowardl(long double <i>x</i>, long double <i>y</i>); | <b>Math function</b> used to calculates the next representable value after x in the direction of y. 
<b>Math Function:</b> double pow(double <i>x</i>, double <i>y</i>); | <b>Math function</b> used to calculates the value x to the power y. 
<b>Math Function:</b> _Decimal32 quantized32(_Decimal32 <i>x</i>, _Decimal32 <i>y</i>); | <b>Math function</b> used to compute the quantum exponent of a single-precision decimal floating-point value. 
<b>Math Function:</b> _Decimal64 quantized64(_Decimal64 <i>x</i>, _Decimal64 <i>y</i>); | <b>Math function</b> used to compute the quantum exponent of a double-precision decimal floating-point value. 
<b>Math Function:</b> _Decimal128 quantized128(_Decimal128 <i>x</i>, _Decimal128 <i>y</i>); | <b>Math function</b> used to compute the quantum exponent of a quad-precision decimal floating-point value. 
<b>Math Function:</b> int quantexpd32(_Decimal32 <i>x</i>); | <b>Math function</b> used to set the quantum exponent of a single-precision decimal floating-point value to the quantum exponent of another single-precision decimal floating-point value. 
<b>Math Function:</b> int quantexpd64(_Decimal64 <i>x</i>); | <b>Math function</b> used to set the quantum exponent of a double-precision decimal floating-point value to the quantum exponent of another double-precision decimal floating-point value. 
<b>Math Function:</b> int quantexpd128(_Decimal128 <i>x</i>); | <b>Math function</b> used to set the quantum exponent of a quad-precision decimal floating-point value to the quantum exponent of another quad-precision decimal floating-point value. 
<b>Math Function:</b> __bool__ samequantumd32(_Decimal32 <i>x</i>, _Decimal32 <i>y</i>); | <b>Math function</b> used to determine if the quantum exponents of two single-precision decimal floating-point values are the same. 
<b>Math Function:</b> __bool__ samequantumd64(_Decimal64 <i>x</i>, _Decimal64 <i>y</i>); | <b>Math function</b> used to determine if the quantum exponents of two double-precision decimal floating-point values are the same. 
<b>Math Function:</b> __bool__ samequantumd128(_Decimal128 <i>x</i>, _Decimal128 <i>y</i>); | <b>Math function</b> used to determine if the quantum exponents of two quad-precision decimal floating-point values are the same. 
<b>Math Function:</b> double sin(double <i>x</i>); | <b>Math function</b> used to calculates the sine of x. 
<b>Math Function:</b> double sinh(double <i>x</i>); | <b>Math function</b> used to calculates the hyperbolic sine of x. 
<b>Math Function:</b> double sqrt(double <i>x</i>); | <b>Math function</b> used to calculates the square root of x. 
<b>Math Function:</b> double tan(double <i>x</i>); | <b>Math function</b> used to calculates the tangent of x. 
<b>Math Function:</b> double tanh(double <i>x</i>); | <b>Math function</b> used to calculates the hyperbolic tangent of x. 
<b>Math Function:</b> double y0(double <i>x</i>); | <b>Math function</b> used to calculates the Bessel function value of the second kind of order 0. 
<b>Math Function:</b> double y1(double <i>x</i>); | <b>Math function</b> used to calculates the Bessel function value of the second kind of order 1. 
<b>Math Function:</b> double yn(int <i>n</i>, double <i>x</i>); | <b>Math function</b> used to calculates the Bessel function value of the second kind of order n. 
