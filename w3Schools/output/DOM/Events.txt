<b>Events event</b>: &lt;<i>element</i> onabort="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the loading of a media is aborted. | &lt;<i>element</i> onabort="<i>myScript</i>"&gt; |  | &lt;video onabort="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onafterprint="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when a page has started printing, or if the print dialogue box has been closed. | &lt;<i>element</i> onafterprint="<i>myScript</i>"&gt; |  | &lt;body onafterprint="myFunction()"&gt; |  
<b>Events event</b>: object.addEventListener("webkitAnimationEnd", <em>myScript</em>);  // Code for Chrome, Safari and Opera<em><br/>object</em>.addEventListener("animationend", <em>myScript</em>);        // Standard syntax<br/> | <b>Events event</b> that the event occurs when a css animation has completed. | object.addEventListener("webkitAnimationEnd", <em>myScript</em>);  // Code for Chrome, Safari and Opera<em><br/>object</em>.addEventListener("animationend", <em>myScript</em>);        // Standard syntax<br/> |  | var x = document.getElementById("myDIV");<br/><br/>// Code for Chrome, Safari and Opera<br/>  x.addEventListener("webkitAnimationEnd", myEndFunction);<br/><br/>// Standard syntax<br/>x.addEventListener("animationend", myEndFunction); |  
<b>Events event</b>: object.addEventListener("webkitAnimationIteration", <em>myScript</em>);  // Code for Chrome, Safari and Opera<em><br/>object</em>.addEventListener("animationiteration", <em>myScript</em>);        // Standard syntax<br/> | <b>Events event</b> that the event occurs when a css animation is repeated. | object.addEventListener("webkitAnimationIteration", <em>myScript</em>);  // Code for Chrome, Safari and Opera<em><br/>object</em>.addEventListener("animationiteration", <em>myScript</em>);        // Standard syntax<br/> |  | var x = document.getElementById("myDIV");<br/><br/>// Code for Chrome, Safari and Opera<br/>  x.addEventListener("webkitAnimationIteration", myRepeatFunction);<br/><br/>// Standard syntax<br/>x.addEventListener("animationiteration", myRepeatFunction); |  
<b>Events event</b>: object.addEventListener("webkitAnimationStart", <em>myScript</em>);  // Code for Chrome, Safari and Opera<em><br/>object</em>.addEventListener("animationstart", <em>myScript</em>);        // Standard syntax<br/> | <b>Events event</b> that the event occurs when a css animation has started. | object.addEventListener("webkitAnimationStart", <em>myScript</em>);  // Code for Chrome, Safari and Opera<em><br/>object</em>.addEventListener("animationstart", <em>myScript</em>);        // Standard syntax<br/> |  | var x = document.getElementById("myDIV");<br/><br/>// Code for Chrome, Safari and Opera<br/>  x.addEventListener("webkitAnimationStart", myStartFunction);<br/><br/>// Standard syntax<br/>x.addEventListener("animationstart", myStartFunction); |  
<b>Events event</b>: &lt;<i>element</i> onbeforeprint="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when a page is about to be printed. | &lt;<i>element</i> onbeforeprint="<i>myScript</i>"&gt; |  | &lt;body onbeforeprint="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onbeforeunload="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs before the document is about to be unloaded. | &lt;<i>element</i> onbeforeunload="<i>myScript</i>"&gt; |  | &lt;body onbeforeunload="return myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onblur="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when an element loses focus. | &lt;<i>element</i> onblur="<i>myScript</i>"&gt; |  | &lt;input type="text" onblur="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> oncanplay="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the browser can start playing the media (when it has buffered  enough to begin). | &lt;<i>element</i> oncanplay="<i>myScript</i>"&gt; |  | &lt;video oncanplay="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> oncanplaythrough="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the browser can play through the media without  stopping for buffering. | &lt;<i>element</i> oncanplaythrough="<i>myScript</i>"&gt; |  | &lt;video oncanplaythrough="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onchange="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the content of a form element, the selection, or the checked state have changed (for <input>, <select>, and <textarea>). | &lt;<i>element</i> onchange="<i>myScript</i>"&gt; |  | &lt;select onchange="myFunction()"&gt; |  
<b>Events event</b>: click | <b>Events event</b> that the event occurs when the user clicks on an element. |  |  | &lt;button onclick="myFunction()"&gt;Click me&lt;/button&gt; |  
<b>Events event</b>: &lt;<i>element</i> oncontextmenu="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user right-clicks on an element to open a context menu. | &lt;<i>element</i> oncontextmenu="<i>myScript</i>"&gt; |  | &lt;div oncontextmenu="myFunction()" contextmenu="mymenu"&gt; |  
<b>Events event</b>: &lt;<i>element</i> oncopy="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user copies the content of an element. | &lt;<i>element</i> oncopy="<i>myScript</i>"&gt; |  | &lt;input type="text" oncopy="myFunction()" value="Try to copy this text"&gt; |  
<b>Events event</b>: &lt;<i>element</i> oncut="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user cuts the content of an element. | &lt;<i>element</i> oncut="<i>myScript</i>"&gt; |  | &lt;input type="text" oncut="myFunction()" value="Try to cut this text"&gt; |  
<b>Events event</b>: &lt;<i>element</i> ondblclick="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user double-clicks on an element. | &lt;<i>element</i> ondblclick="<i>myScript</i>"&gt; |  | &lt;p ondblclick="myFunction()"&gt;Double-click me&lt;/p&gt; |  
<b>Events event</b>: &lt;<i>element</i> ondrag="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when an element is being dragged. | &lt;<i>element</i> ondrag="<i>myScript</i>"&gt; |  | &lt;p draggable="true" ondrag="myFunction(event)"&gt;Drag me!&lt;/p&gt; |  
<b>Events event</b>: &lt;<i>element</i> ondragend="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user has finished dragging an element. | &lt;<i>element</i> ondragend="<i>myScript</i>"&gt; |  | &lt;p draggable="true" ondragend="myFunction(event)"&gt;Drag me!&lt;/p&gt; |  
<b>Events event</b>: &lt;<i>element</i> ondragenter="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the dragged element enters the drop target. | &lt;<i>element</i> ondragenter="<i>myScript</i>"&gt; |  | &lt;div ondragenter="myFunction(event)"&gt;&lt;/div&gt; |  
<b>Events event</b>: &lt;<i>element</i> ondragleave="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the dragged element leaves the drop target. | &lt;<i>element</i> ondragleave="<i>myScript</i>"&gt; |  | &lt;div ondragleave="myFunction(event)"&gt;&lt;/div&gt; |  
<b>Events event</b>: &lt;<i>element</i> ondragover="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the dragged element is over the drop target. | &lt;<i>element</i> ondragover="<i>myScript</i>"&gt; |  | &lt;div ondragover="myFunction(event)"&gt;&lt;/div&gt; |  
<b>Events event</b>: &lt;<i>element</i> ondragstart="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user starts to drag an element. | &lt;<i>element</i> ondragstart="<i>myScript</i>"&gt; |  | &lt;p draggable="true" ondragstart="myFunction(event)"&gt;Drag me!&lt;/p&gt; |  
<b>Events event</b>: &lt;<i>element</i> ondrop="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the dragged element is dropped on the drop target. | &lt;<i>element</i> ondrop="<i>myScript</i>"&gt; |  | &lt;div ondrop="myFunction(event)"&gt;&lt;/div&gt; |  
<b>Events event</b>: &lt;<i>element</i> ondurationchange="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the duration of the media is changed. | &lt;<i>element</i> ondurationchange="<i>myScript</i>"&gt; |  | &lt;video ondurationchange="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onended="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the media has reach the end (useful for messages like "thanks for listening"). | &lt;<i>element</i> onended="<i>myScript</i>"&gt; |  | &lt;audio onended="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onerror="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when an error occurs while loading an external file . | &lt;<i>element</i> onerror="<i>myScript</i>"&gt; |  | &lt;img src="image.gif" onerror="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onfocus="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when an element gets focus. | &lt;<i>element</i> onfocus="<i>myScript</i>"&gt; |  | &lt;input type="text"  onfocus="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onfocusin="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when an element is about to get focus. | &lt;<i>element</i> onfocusin="<i>myScript</i>"&gt; |  | &lt;input type="text"  onfocusin="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onfocusout="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when an element is about to lose focus. | &lt;<i>element</i> onfocusout="<i>myScript</i>"&gt; |  | &lt;input type="text"  onfocusout="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onfullscreenchange="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when an element is displayed in fullscreen mode. | &lt;<i>element</i> onfullscreenchange="<i>myScript</i>"&gt; |  | document.addEventListener("fullscreenchange", function() {<br/>     output.innerHTML = "fullscreenchange event fired!";<br/>}); |  
<b>Events event</b>: &lt;<i>element</i> onfullscreenerror="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when an element can not be displayed in fullscreen mode. | &lt;<i>element</i> onfullscreenerror="<i>myScript</i>"&gt; |  | document.addEventListener("fullscreenerror", function() {<br/>     alert("Fullscreen denied")<br/>}); |  
<b>Events event</b>: &lt;<i>element</i> onhashchange="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when there has been changes to the anchor part of a url. | &lt;<i>element</i> onhashchange="<i>myScript</i>"&gt; |  | &lt;body onhashchange="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> oninput="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when an element gets user input. | &lt;<i>element</i> oninput="<i>myScript</i>"&gt; |  | &lt;input type="text" oninput="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> oninvalid="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when an element is invalid. | &lt;<i>element</i> oninvalid="<i>myScript</i>"&gt; |  | &lt;input type="text" oninvalid="alert('You must fill out the form!');" required&gt; |  
<b>Events event</b>: &lt;<i>element</i> onkeydown="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user is pressing a key. | &lt;<i>element</i> onkeydown="<i>myScript</i>"&gt; |  | &lt;input type="text" onkeydown="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onkeypress="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user presses a key. | &lt;<i>element</i> onkeypress="<i>myScript</i>"&gt; |  | &lt;input type="text" onkeypress="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onkeyup="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user releases a key. | &lt;<i>element</i> onkeyup="<i>myScript</i>"&gt; |  | &lt;input type="text" onkeyup="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onload="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when an object has loaded. | &lt;<i>element</i> onload="<i>myScript</i>"&gt; |  | &lt;body onload="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onloadeddata="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when media data is loaded. | &lt;<i>element</i> onloadeddata="<i>myScript</i>"&gt; |  | &lt;video onloadeddata="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onloadedmetadata="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when meta data (like dimensions and duration) are loaded. | &lt;<i>element</i> onloadedmetadata="<i>myScript</i>"&gt; |  | &lt;video onloadedmetadata="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onloadstart="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the browser starts looking for the specified media. | &lt;<i>element</i> onloadstart="<i>myScript</i>"&gt; |  | &lt;video onloadstart="myFunction()"&gt; |  
<b>Events event</b>: <em>object</em>.onmessage = function(){<i>myScript</i>}; | <b>Events event</b> that the event occurs when a message is received through the event source. | <em>object</em>.onmessage = function(){<i>myScript</i>}; |  | var source = new EventSource("demo_sse.php");<br/>source.onmessage = function(event) {<br/>  document.getElementById("myDIV").innerHTML += event.data + "&lt;br&gt;";<br/>}; |  
<b>Events event</b>: &lt;<i>element</i> onmousedown="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user presses a mouse button over an element. | &lt;<i>element</i> onmousedown="<i>myScript</i>"&gt; |  | &lt;p onmousedown="myFunction()"&gt;Click the text!&lt;/p&gt; |  
<b>Events event</b>: &lt;<i>element</i> onmouseenter="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the pointer is moved onto an element. | &lt;<i>element</i> onmouseenter="<i>myScript</i>"&gt; |  | &lt;img onmouseenter="bigImg(this)" src="smiley.gif" alt="Smiley"&gt; |  
<b>Events event</b>: &lt;<i>element</i>  onmouseleave="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the pointer is moved out of an element. | &lt;<i>element</i>  onmouseleave="<i>myScript</i>"&gt; |  | &lt;img onmouseleave="normalImg(this)" src="smiley.gif" alt="Smiley"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onmousemove="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the pointer is moving while it is over an element. | &lt;<i>element</i> onmousemove="<i>myScript</i>"&gt; |  | &lt;div onmousemove="myFunction()"&gt;Move the cursor over me&lt;/div&gt; |  
<b>Events event</b>: &lt;<i>element</i> onmouseover="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the pointer is moved onto an element, or onto one of its children. | &lt;<i>element</i> onmouseover="<i>myScript</i>"&gt; |  | &lt;img onmouseover="bigImg(this)" src="smiley.gif" alt="Smiley"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onmouseout="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when a user moves the mouse pointer out of an element, or out of one of its children. | &lt;<i>element</i> onmouseout="<i>myScript</i>"&gt; |  | &lt;img onmouseout="normalImg(this)" src="smiley.gif" alt="Smiley"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onmouseup="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when a user releases a mouse button over an element. | &lt;<i>element</i> onmouseup="<i>myScript</i>"&gt; |  | &lt;p onmouseup="mouseUp()"&gt;Click the text!&lt;/p&gt; |  
<b>Events event</b>: &lt;<i>element</i> onwheel="<i>myScript</i>"&gt; | <b>Events event</b> that deprecated. use the    wheel event instead. | &lt;<i>element</i> onwheel="<i>myScript</i>"&gt; |  | document.getElementById("myDIV").addEventListener("wheel", myFunction);<br/> <br/>function myFunction() {<br/>  this.style.fontSize = "35px";<br/>} |  
<b>Events event</b>: &lt;<i>element</i> onoffline="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the browser starts to work offline. | &lt;<i>element</i> onoffline="<i>myScript</i>"&gt; |  | &lt;body onoffline="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> ononline="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the browser starts to work online. | &lt;<i>element</i> ononline="<i>myScript</i>"&gt; |  | &lt;body ononline="myFunction()"&gt; |  
<b>Events event</b>: <em>object</em>.onopen = function(){<i>myScript</i>}; | <b>Events event</b> that the event occurs when a connection with the event source is opened. | <em>object</em>.onopen = function(){<i>myScript</i>}; |  | var source = new EventSource("demo_sse.php");<br/>source.onopen = function() {<br/>  document.getElementById("myH1").innerHTML = "Getting server updates";<br/>}; |  
<b>Events event</b>: &lt;<i>element</i> onpagehide="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user navigates away from a webpage. | &lt;<i>element</i> onpagehide="<i>myScript</i>"&gt; |  | &lt;body onpagehide="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onpageshow="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user navigates to a webpage. | &lt;<i>element</i> onpageshow="<i>myScript</i>"&gt; |  | &lt;body onpageshow="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onpaste="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user pastes some content in an element. | &lt;<i>element</i> onpaste="<i>myScript</i>"&gt; |  | &lt;input type="text" onpaste="myFunction()" value="Paste something in here"&gt; |  
<b>Events event</b>: &lt;<i>element</i>  onpause="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the media is paused either by the user or  programmatically. | &lt;<i>element</i>  onpause="<i>myScript</i>"&gt; |  | &lt;video onpause="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onplay="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the media has been started or is no longer paused. | &lt;<i>element</i> onplay="<i>myScript</i>"&gt; |  | &lt;video onplay="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i>  onplaying="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the media is playing after having been paused or stopped for buffering. | &lt;<i>element</i>  onplaying="<i>myScript</i>"&gt; |  | &lt;video onplaying="myFunction()"&gt; |  
<b>Events event</b>: popstate | <b>Events event</b> that the event occurs when the window's history changes. |  |  |  |  
<b>Events event</b>: &lt;<i>element</i> onprogress="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the browser is in the process of getting the media  data (downloading the media). | &lt;<i>element</i> onprogress="<i>myScript</i>"&gt; |  | &lt;video onprogress="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onratechange="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the playing speed of the media is changed. | &lt;<i>element</i> onratechange="<i>myScript</i>"&gt; |  | &lt;video onratechange="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onresize="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the document view is resized. | &lt;<i>element</i> onresize="<i>myScript</i>"&gt; |  | &lt;body onresize="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onreset="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when a form is reset. | &lt;<i>element</i> onreset="<i>myScript</i>"&gt; |  | &lt;form onreset="myFunction()"&gt;<br/>  Enter name: &lt;input type="text"&gt;<br/>  &lt;input type="reset"&gt;<br/>&lt;/form&gt; |  
<b>Events event</b>: &lt;<i>element</i> onscroll="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when an element's scrollbar is being scrolled. | &lt;<i>element</i> onscroll="<i>myScript</i>"&gt; |  | &lt;div onscroll="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onsearch="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user writes something in a search field (for <input="search">). | &lt;<i>element</i> onsearch="<i>myScript</i>"&gt; |  | &lt;input type="search" onsearch="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onseeked="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user is finished moving/skipping to a new position  in the media. | &lt;<i>element</i> onseeked="<i>myScript</i>"&gt; |  | &lt;video onseeked="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onseeking="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user starts moving/skipping to a new position in  the media. | &lt;<i>element</i> onseeking="<i>myScript</i>"&gt; |  | &lt;video onseeking="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onselect="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs after the user selects some text (for <input> and <textarea>). | &lt;<i>element</i> onselect="<i>myScript</i>"&gt; |  | &lt;input type="text" onselect="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onshow="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when a <menu> element is shown as a context menu. | &lt;<i>element</i> onshow="<i>myScript</i>"&gt; |  | &lt;div contextmenu="mymenu"&gt;<br/>  &lt;p&gt;Right-click inside this box to see the context menu!<br/>  &lt;menu type="context" id="mymenu" onshow="myFunction()"&gt;<br/>    &lt;menuitem label="Refresh" onclick="window.location.reload();"&gt;&lt;/menuitem&gt;<br/>  &lt;/menu&gt;<br/>&lt;/div&gt; |  
<b>Events event</b>: &lt;<i>element</i> onstalled="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the browser is trying to get media data, but data is not available. | &lt;<i>element</i> onstalled="<i>myScript</i>"&gt; |  | &lt;video onstalled="myFunction()"&gt; |  
<b>Events event</b>: storage | <b>Events event</b> that the event occurs when a web storage area is updated. |  |  |  |  
<b>Events event</b>: &lt;<i>element</i> onsubmit="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when a form is submitted. | &lt;<i>element</i> onsubmit="<i>myScript</i>"&gt; |  | &lt;form onsubmit="myFunction()"&gt;<br/>  Enter name: &lt;input type="text"&gt;<br/>  &lt;input type="submit"&gt;<br/>&lt;/form&gt; |  
<b>Events event</b>: &lt;<i>element</i> onsuspend="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the browser is intentionally not getting media data. | &lt;<i>element</i> onsuspend="<i>myScript</i>"&gt; |  | &lt;video onsuspend="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> ontimeupdate="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the playing position has changed (like when the user  fast forwards to a different point in the media). | &lt;<i>element</i> ontimeupdate="<i>myScript</i>"&gt; |  | &lt;video ontimeupdate="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> ontoggle="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the user opens or closes the <details> element. | &lt;<i>element</i> ontoggle="<i>myScript</i>"&gt; |  | &lt;details ontoggle="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> ontouchcancel="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the touch is interrupted. | &lt;<i>element</i> ontouchcancel="<i>myScript</i>"&gt; |  | &lt;p ontouchcancel="myFunction(event)"&gt;Touch me!&lt;/p&gt; |  
<b>Events event</b>: &lt;<i>element</i> ontouchend="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when a finger is removed from a touch screen. | &lt;<i>element</i> ontouchend="<i>myScript</i>"&gt; |  | &lt;p ontouchend="myFunction(event)"&gt;Touch me!&lt;/p&gt; |  
<b>Events event</b>: &lt;<i>element</i> ontouchmove="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when a finger is dragged across the screen. | &lt;<i>element</i> ontouchmove="<i>myScript</i>"&gt; |  | &lt;p ontouchmove="myFunction(event)"&gt;Touch me!&lt;/p&gt; |  
<b>Events event</b>: &lt;<i>element</i> ontouchstart="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when a finger is placed on a touch screen. | &lt;<i>element</i> ontouchstart="<i>myScript</i>"&gt; |  | &lt;p ontouchstart="myFunction(event)"&gt;Touch me!&lt;/p&gt; |  
<b>Events event</b>: object.addEventListener("webkitTransitionEnd", <em>myScript</em>);  // Code for Safari 3.1 to 6.0<em><br/>object</em>.addEventListener("transitionend", <em>myScript</em>);        // Standard syntax<br/> | <b>Events event</b> that the event occurs when a css transition has completed. | object.addEventListener("webkitTransitionEnd", <em>myScript</em>);  // Code for Safari 3.1 to 6.0<em><br/>object</em>.addEventListener("transitionend", <em>myScript</em>);        // Standard syntax<br/> |  | // Code for Safari 3.1 to 6.0<br/>  document.getElementById("myDIV").addEventListener("webkitTransitionEnd", myFunction);<br/><br/>// Standard syntax<br/>  document.getElementById("myDIV").addEventListener("transitionend", myFunction); |  
<b>Events event</b>: &lt;<i>element</i> onunload="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs once a page has unloaded (for <body>). | &lt;<i>element</i> onunload="<i>myScript</i>"&gt; |  | &lt;body onunload="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onvolumechange="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the volume of the media has changed (includes setting the  volume to "mute"). | &lt;<i>element</i> onvolumechange="<i>myScript</i>"&gt; |  | &lt;video onvolumechange="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onwaiting="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the media has paused but is expected to resume (like  when the media pauses to buffer more data). | &lt;<i>element</i> onwaiting="<i>myScript</i>"&gt; |  | &lt;video onwaiting="myFunction()"&gt; |  
<b>Events event</b>: &lt;<i>element</i> onwheel="<i>myScript</i>"&gt; | <b>Events event</b> that the event occurs when the mouse wheel rolls up or down over an element. | &lt;<i>element</i> onwheel="<i>myScript</i>"&gt; |  | document.getElementById("myDIV").addEventListener("wheel", myFunction);<br/> <br/>function myFunction() {<br/>  this.style.fontSize = "35px";<br/>} |  
<b>Events property/method</b>: <em>event</em>.altKey | <b>Events property/method</b> that returns whether the "alt" key was pressed when the mouse event was triggered. | <em>event</em>.altKey |  | if (event.altKey) {<br/>  alert("The ALT key was pressed!");<br/>  } else {<br/>  alert("The ALT key was NOT pressed!");<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.altKey | <b>Events property/method</b> that returns whether the "alt" key was pressed when the key event was triggered. | <em>event</em>.altKey |  | var x = document.getElementById("demo");<br/>if (event.altKey) {<br/>  x.innerHTML = "The ALT key was pressed!";<br/>} else {<br/>  x.innerHTML = "The ALT key was NOT pressed!";<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.animationName | <b>Events property/method</b> that returns the name of the animation. | <em>event</em>.animationName |  | var x = document.getElementById("myDIV");<br/>x.addEventListener("animationstart", myStartFunction);<br/><br/>function myStartFunction(event) {<br/>  this.innerHTML = "Animation-name is: " + event.animationName;<br/>} |  
<b>Events property/method</b>: <em>event</em>.bubbles | <b>Events property/method</b> that returns whether or not a specific event is a bubbling event. | <em>event</em>.bubbles |  | var x = event.bubbles;<br/> |  
<b>Events property/method</b>: <em>event</em>.button | <b>Events property/method</b> that returns which mouse button was pressed when the mouse event was triggered. | <em>event</em>.button |  | alert("You pressed button: " + event.button)<br/> |  
<b>Events property/method</b>: <em>event</em>.buttons | <b>Events property/method</b> that returns which mouse buttons were pressed when the mouse event was triggered. | <em>event</em>.buttons |  | var x = event.buttons;<br/> |  
<b>Events property/method</b>: <em>event</em>.cancelable | <b>Events property/method</b> that returns whether or not an event can have its default action prevented. | <em>event</em>.cancelable |  | var x = event.cancelable;<br/> |  
<b>Events property/method</b>: <em>event</em>.charCode | <b>Events property/method</b> that returns the unicode character code of the key that triggered the  onkeypress event. | <em>event</em>.charCode |  | var x = event.charCode; |  
<b>Events property/method</b>: changetouches | <b>Events property/method</b> that returns a list of all the touch objects whose state changed between the      previous touch and this touch. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.clientX | <b>Events property/method</b> that returns the horizontal coordinate of the mouse pointer, relative to the current window, when  the mouse event was triggered. | <em>event</em>.clientX |  | var x = event.clientX;     // Get the horizontal coordinate<br/>var y = event.clientY;     // Get the vertical coordinate<br/>var coor = "X coords: " + x + ", Y coords: " + y;<br/> |  
<b>Events property/method</b>: <em>event</em>.clientY | <b>Events property/method</b> that returns the vertical coordinate of the mouse pointer, relative to the current window, when  the mouse event was triggered. | <em>event</em>.clientY |  | var x = event.clientX;     // Get the horizontal coordinate<br/>var y = event.clientY;     // Get the vertical coordinate<br/>var coor = "X coords: " + x + ", Y coords: " + y;<br/> |  
<b>Events property/method</b>: clipboarddata | <b>Events property/method</b> that returns an object containing the data affected by the clipboard      operation. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.code | <b>Events property/method</b> that returns the code of the key that triggered the event. | <em>event</em>.code |  | var x = event.code; |  
<b>Events property/method</b>: composed | <b>Events property/method</b> that returns whether the event is composed or not . |  |  |  |  
<b>Events property/method</b>: <em>event</em>.ctrlKey | <b>Events property/method</b> that returns whether the "ctrl" key was pressed when the mouse event was triggered. | <em>event</em>.ctrlKey |  | if (event.ctrlKey) {<br/>  alert("The CTRL key was pressed!");<br/>  } else {<br/>  alert("The CTRL key was NOT pressed!");<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.ctrlKey | <b>Events property/method</b> that returns whether the "ctrl" key was pressed when the key event was triggered. | <em>event</em>.ctrlKey |  | var x = document.getElementById("demo");<br/>if (event.ctrlKey) {<br/>  x.innerHTML = "The CTRL key was pressed!";<br/>} else {<br/>  x.innerHTML = "The CTRL key was NOT pressed!";<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.currentTarget | <b>Events property/method</b> that returns the element whose event listeners triggered the event. | <em>event</em>.currentTarget |  | alert(event.currentTarget);<br/> |  
<b>Events property/method</b>: <em>event</em>.data | <b>Events property/method</b> that returns the inserted characters. | <em>event</em>.data |  | function myFunction(event) {<br/>  var x = event.data;<br/>}<br/> |  
<b>Events property/method</b>: datatransfer | <b>Events property/method</b> that returns an object containing the data being dragged/dropped, or      inserted/deleted. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.defaultPrevented | <b>Events property/method</b> that returns whether or not the preventdefault() method was called for  the event. | <em>event</em>.defaultPrevented |  | document.getElementById("myAnchor").addEventListener("click", function(event){<br/>  event.preventDefault()<br/>  alert("Was preventDefault() called: " + event.defaultPrevented);<br/>});<br/> |  
<b>Events property/method</b>: <em>event</em>.deltaX | <b>Events property/method</b> that returns the horizontal scroll amount of a mouse wheel (x-axis). | <em>event</em>.deltaX |  | function myFunction(event) {<br/>  var x = event.deltaX;<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.deltaY | <b>Events property/method</b> that returns the vertical scroll amount of a mouse wheel (y-axis). | <em>event</em>.deltaY |  | function myFunction(event) {<br/>  var y = event.deltaY;<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.deltaZ | <b>Events property/method</b> that returns the scroll amount of a mouse wheel for the z-axis. | <em>event</em>.deltaZ |  | function myFunction(event) {<br/>  var z = event.deltaZ;<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.deltaMode | <b>Events property/method</b> that returns a number that represents the unit of measurements for delta values (pixels, lines or pages). | <em>event</em>.deltaMode |  | function myFunction(event) {<br/>  var x = event.deltaMode;<br/>  // 0    = pixels<br/>  // 1 = lines<br/>  // 2 = pages<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.detail | <b>Events property/method</b> that returns a number that indicates how many times the mouse was clicked. | <em>event</em>.detail |  | var x = event.detail;<br/> |  
<b>Events property/method</b>: <em>event</em>.elapsedTime | <b>Events property/method</b> that returns the number of seconds an animation has been running. | <em>event</em>.elapsedTime |  | var x = document.getElementById("myDIV");<br/>x.addEventListener("animationiteration", myRepeatFunction);<br/><br/>function myRepeatFunction(event) {<br/>  this.innerHTML = "Elapsed time: " + event.elapsedTime;<br/>} |  
<b>Events property/method</b>: <em>event</em>.elapsedTime | <b>Events property/method</b> that returns the number of seconds a transition has been running. | <em>event</em>.elapsedTime |  | document.getElementById("myDIV").addEventListener("transitionend", myFunction);<br/><br/>function myFunction(event) {<br/>  this.innerHTML = "Transition lasted: " + event.elapsedTime + " seconds";<br/>  } |  
<b>Events property/method</b>: <em>event</em>.eventPhase | <b>Events property/method</b> that returns which phase of the event flow is currently being evaluated. | <em>event</em>.eventPhase |  |  |  
<b>Events property/method</b>: gettargetranges() | <b>Events property/method</b> that returns an array containing target ranges that will be affected by the      insertion/deletion. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.getModifierState(<em>modifierKey</em>) | <b>Events property/method</b> that returns an array containing target ranges that will be affected by the      insertion/deletion. | <em>event</em>.getModifierState(<em>modifierKey</em>) |  | var x = event.getModifierState("CapsLock"); |  
<b>Events property/method</b>: <em>event</em>.inputType | <b>Events property/method</b> that returns the type of the change (i.e "inserting" or "deleting"). | <em>event</em>.inputType |  | function myFunction(event) {<br/>  var x = event.inputType;<br/>}<br/> |  
<b>Events property/method</b>: iscomposing | <b>Events property/method</b> that returns whether the state of the event is composing or not. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.isTrusted | <b>Events property/method</b> that returns whether or not an event is trusted. | <em>event</em>.isTrusted |  | function myFunction(event) {<br/>  if ("isTrusted" in event) {<br/>    if (event.isTrusted) {<br/>         alert ("The " + event.type + " event is trusted.");<br/>    } else {<br/>         alert ("The " + event.type + " event is not trusted.");<br/>       }<br/>  } else {<br/>    alert ("The isTrusted property is not supported by your browser");<br/>     }<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.key | <b>Events property/method</b> that returns the key value of the key represented by the event. | <em>event</em>.key |  | var x = event.key; |  
<b>Events property/method</b>: key | <b>Events property/method</b> that returns the key of the changed storage item. |  |  |  |  
<b>Events property/method</b>: event.keyCode | <b>Events property/method</b> that returns the unicode character code of the key that triggered the onkeypress event, or the  unicode key code of the key that triggered the onkeydown or  onkeyup event. | event.keyCode |  | let unicode = event.keyCode; |  
<b>Events property/method</b>: <em>event</em>.location | <b>Events property/method</b> that returns the location of a key on the keyboard or device. | <em>event</em>.location |  | var x = event.location; |  
<b>Events property/method</b>: lengthcomputable | <b>Events property/method</b> that returns whether the length of the progress can be computable or not. |  |  |  |  
<b>Events property/method</b>: loaded | <b>Events property/method</b> that returns how much work has been loaded. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.metaKey | <b>Events property/method</b> that returns whether the "meta" key was pressed when an event was triggered. | <em>event</em>.metaKey |  | if (event.metaKey) {<br/>  alert("The META key was pressed!");<br/>  } else {<br/>  alert("The META key was NOT pressed!");<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.metaKey | <b>Events property/method</b> that returns whether the "meta" key was pressed when the key event was triggered. | <em>event</em>.metaKey |  | var x = document.getElementById("demo");<br/>if (event.metaKey) {<br/>  x.innerHTML = "The META key was pressed!";<br/>} else {<br/>  x.innerHTML = "The META key was NOT pressed!";<br/>}<br/> |  
<b>Events property/method</b>: movementx | <b>Events property/method</b> that returns the horizontal coordinate of the mouse pointer relative to the  position of the last mousemove event. |  |  |  |  
<b>Events property/method</b>: movementy | <b>Events property/method</b> that returns the vertical coordinate of the mouse pointer relative to the  position of the last mousemove event. |  |  |  |  
<b>Events property/method</b>: newvalue | <b>Events property/method</b> that returns the new value of the changed storage item. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.newURL | <b>Events property/method</b> that returns the url of the document, after the hash has been changed. | <em>event</em>.newURL |  | event.newURL; |  
<b>Events property/method</b>: offsetx | <b>Events property/method</b> that returns the horizontal coordinate of the mouse pointer relative to the  position of the edge of the target element. |  |  |  |  
<b>Events property/method</b>: offsety | <b>Events property/method</b> that returns the vertical coordinate of the mouse pointer relative to the  position of the edge of the target element. |  |  |  |  
<b>Events property/method</b>: oldvalue | <b>Events property/method</b> that returns the old value of the changed storage item. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.oldURL | <b>Events property/method</b> that returns the url of the document, before the hash was changed. | <em>event</em>.oldURL |  | event.oldURL; |  
<b>Events property/method</b>: <em>event</em>.pageX | <b>Events property/method</b> that returns the horizontal coordinate of the mouse pointer, relative to the document, when  the mouse event was triggered. | <em>event</em>.pageX |  | var x = event.pageX;     // Get the horizontal coordinate<br/>var y = event.pageY;     // Get the vertical coordinate<br/>var coor = "X coords: " + x + ", Y coords: " + y;<br/> |  
<b>Events property/method</b>: <em>event</em>.pageY | <b>Events property/method</b> that returns the vertical coordinate of the mouse pointer, relative to the document, when  the mouse event was triggered. | <em>event</em>.pageY |  | var x = event.pageX;     // Get the horizontal coordinate<br/>var y = event.pageY;     // Get the vertical coordinate<br/>var coor = "X coords: " + x + ", Y coords: " + y;<br/> |  
<b>Events property/method</b>: <em>event</em>.persisted | <b>Events property/method</b> that returns whether the webpage was cached by the browser. | <em>event</em>.persisted |  | function myFunction(event) { <br/>  alert(event.persisted);<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.preventDefault() | <b>Events property/method</b> that cancels the event if it is cancelable, meaning that the default  action that belongs to the event will not occur. | <em>event</em>.preventDefault() |  | document.getElementById("myAnchor").addEventListener("click", function(event){<br/>     event.preventDefault()<br/>});<br/> |  
<b>Events property/method</b>: <em>event</em>.propertyName | <b>Events property/method</b> that returns the name of the css property associated with the animation or transition. | <em>event</em>.propertyName |  | document.getElementById("myDIV").addEventListener("transitionend", myFunction);<br/><br/>function myFunction(event) {<br/>     this.innerHTML = "Property name is: " + event.propertyName;<br/>} |  
<b>Events property/method</b>: pseudoelement | <b>Events property/method</b> that returns the name of the pseudo-element of the animation or transition. |  |  |  |  
<b>Events property/method</b>: region | <b>Events property/method</b> that . |  |  |  |  
<b>Events property/method</b>: <em>event</em>.relatedTarget | <b>Events property/method</b> that returns the element related to the element that triggered the mouse event. | <em>event</em>.relatedTarget |  | &lt;p onmouseover="getRelatedElement(event)"&gt;Mouse over this paragraph.&lt;/p&gt;<br/> <br/>&lt;script&gt;<br/>function getRelatedElement(event) { <br/>  alert("The cursor just exited the " + event.relatedTarget.tagName + " element.");<br/>}<br/>&lt;/script&gt;<br/> |  
<b>Events property/method</b>: <em>event</em>.relatedTarget | <b>Events property/method</b> that returns the element related to the element that triggered the event. | <em>event</em>.relatedTarget |  | function getRelatedElement(event) { <br/>  alert(event.relatedTarget.tagName);<br/>}<br/> |  
<b>Events property/method</b>: repeat | <b>Events property/method</b> that returns whether a key is being hold down repeatedly, or not. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.screenX | <b>Events property/method</b> that returns the horizontal coordinate of the mouse pointer, relative to the screen, when an event was triggered. | <em>event</em>.screenX |  | var x = event.screenX;     // Get the horizontal coordinate<br/>var y = event.screenY;     // Get the vertical coordinate<br/>var coor = "X coords: " + x + ", Y coords: " + y;<br/> |  
<b>Events property/method</b>: <em>event</em>.screenY | <b>Events property/method</b> that returns the vertical coordinate of the mouse pointer, relative to  the screen, when an event was triggered. | <em>event</em>.screenY |  | var x = event.screenX;     // Get the horizontal coordinate<br/>var y = event.screenY;     // Get the vertical coordinate<br/>var coor = "X coords: " + x + ", Y coords: " + y;<br/> |  
<b>Events property/method</b>: <em>event</em>.shiftKey | <b>Events property/method</b> that returns whether the "shift" key was pressed when an event was triggered. | <em>event</em>.shiftKey |  | if (event.shiftKey) {<br/>  alert("The SHIFT key was pressed!");<br/>  } else {<br/>  alert("The SHIFT key was NOT pressed!");<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.shiftKey | <b>Events property/method</b> that returns whether the "shift" key was pressed when the key event was triggered. | <em>event</em>.shiftKey |  | var x = document.getElementById("demo");<br/>if (event.shiftKey) {<br/>  x.innerHTML = "The SHIFT key was pressed!";<br/>} else {<br/>  x.innerHTML = "The SHIFT key was NOT pressed!";<br/>}<br/> |  
<b>Events property/method</b>: state | <b>Events property/method</b> that returns an object containing a copy of the history entries. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.stopImmediatePropagation() | <b>Events property/method</b> that prevents other listeners of the same event from being called. | <em>event</em>.stopImmediatePropagation() |  | var x = document.getElementById("myBtn");<br/>x.addEventListener("click", myFunction);<br/>x.addEventListener("click", someOtherFunction);<br/> <br/>function myFunction(event) {<br/>  alert ("Hello World!");<br/>  event.stopImmediatePropagation();<br/>} <br/><br/>// This function will not be executed<br/>function someOtherFunction() {<br/>  alert ("I will not get to say Hello World"); <br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.stopPropagation() | <b>Events property/method</b> that prevents further propagation of an event during event flow. | <em>event</em>.stopPropagation() |  | function func1(event) {<br/>  alert("DIV 1");<br/>     event.stopPropagation();<br/>}<br/> |  
<b>Events property/method</b>: storagearea | <b>Events property/method</b> that returns an object representing the affected storage object. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.target | <b>Events property/method</b> that returns the element that triggered the event. | <em>event</em>.target |  | alert(event.target);<br/> |  
<b>Events property/method</b>: <em>event</em>.targetTouches | <b>Events property/method</b> that returns a list of all the touch objects that are in contact with the    surface and where the touchstart event occured on the same target element as    the current target element. | <em>event</em>.targetTouches |  | function countTouches(event) {<br/>  var x = event.targetTouches.length;<br/>}<br/> |  
<b>Events property/method</b>: <em>event</em>.timeStamp | <b>Events property/method</b> that returns the time (in milliseconds relative to the epoch) at which  the event was created. | <em>event</em>.timeStamp |  | var n = event.timeStamp; |  
<b>Events property/method</b>: total | <b>Events property/method</b> that returns the total amount of work that will be loaded. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.touches | <b>Events property/method</b> that returns a list of all the touch objects that are currently in contact with    the surface. | <em>event</em>.touches |  | function countTouches(event) {<br/>  var x = event.touches.length;<br/>}<br/> |  
<b>Events property/method</b>: object.addEventListener("webkitTransitionEnd", <em>myScript</em>);  // Code for Safari 3.1 to 6.0<em><br/>object</em>.addEventListener("transitionend", <em>myScript</em>);        // Standard syntax<br/> | <b>Events property/method</b> that the event occurs when a css transition has completed. | object.addEventListener("webkitTransitionEnd", <em>myScript</em>);  // Code for Safari 3.1 to 6.0<em><br/>object</em>.addEventListener("transitionend", <em>myScript</em>);        // Standard syntax<br/> |  | // Code for Safari 3.1 to 6.0<br/>  document.getElementById("myDIV").addEventListener("webkitTransitionEnd", myFunction);<br/><br/>// Standard syntax<br/>  document.getElementById("myDIV").addEventListener("transitionend", myFunction); |  
<b>Events property/method</b>: <em>event</em>.type | <b>Events property/method</b> that returns the name of the event. | <em>event</em>.type |  | var x = event.type; |  
<b>Events property/method</b>: url | <b>Events property/method</b> that returns the url of the changed item's document. |  |  |  |  
<b>Events property/method</b>: <em>event</em>.which | <b>Events property/method</b> that returns which mouse button was pressed when the mouse event was triggered. | <em>event</em>.which |  | alert("You pressed button: " + event.which)<br/> |  
<b>Events property/method</b>: <em>event</em>.which | <b>Events property/method</b> that returns the unicode character code of the key that triggered the onkeypress event, or the  unicode key code of the key that triggered the onkeydown or  onkeyup event. | <em>event</em>.which |  | var x = event.which; |  
<b>Events property/method</b>: <em>event</em>.view | <b>Events property/method</b> that returns a reference to the window object where the event occurred. | <em>event</em>.view |  | var x = event.view;<br/> |  
