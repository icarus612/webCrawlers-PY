<b>Os method</b> used to use the real uid/gid to test for access to path. | os.access(path, mode) 
<b>Os method</b> used to change the current working directory to path | os.chdir(path) 
<b>Os method</b> used to set the flags of path to the numeric flags. | os.chflags(path, flags) 
<b>Os method</b> used to change the mode of path to the numeric mode. | os.chmod(path, mode) 
<b>Os method</b> used to change the owner and group id of path to the numeric uid and gid. | os.chown(path, uid, gid) 
<b>Os method</b> used to change the root directory of the current process to path. | os.chroot(path) 
<b>Os method</b> used to close file descriptor fd. | os.close(fd) 
<b>Os method</b> used to close all file descriptors from fd_low (inclusive) to fd_high (exclusive), ignoring errors. | os.closerange(fd_low, fd_high) 
<b>Os method</b> used to return a duplicate of file descriptor fd. | os.dup(fd) 
<b>Os method</b> used to duplicate file descriptor fd to fd2, closing the latter first if necessary. | os.dup2(fd, fd2) 
<b>Os method</b> used to change the current working directory to the directory represented by the file descriptor fd. | os.fchdir(fd) 
<b>Os method</b> used to change the mode of the file given by fd to the numeric mode. | os.fchmod(fd, mode) 
<b>Os method</b> used to change the owner and group id of the file given by fd to the numeric uid and gid. | os.fchown(fd, uid, gid) 
<b>Os method</b> used to force write of file with filedescriptor fd to disk. | os.fdatasync(fd) 
<b>Os method</b> used to return an open file object connected to the file descriptor fd. | os.fdopen(fd[, mode[, bufsize]]) 
<b>Os method</b> used to return system configuration information relevant to an open file. name specifies the configuration value to retrieve. | os.fpathconf(fd, name) 
<b>Os method</b> used to return status for file descriptor fd, like stat(). | os.fstat(fd) 
<b>Os method</b> used to return information about the filesystem containing the file associated with file descriptor fd, like statvfs(). | os.fstatvfs(fd) 
<b>Os method</b> used to force write of file with filedescriptor fd to disk. | os.fsync(fd) 
<b>Os method</b> used to truncate the file corresponding to file descriptor fd, so that it is at most length bytes in size. | os.ftruncate(fd, length) 
<b>Os method</b> used to return a string representing the current working directory. | os.getcwd() 
<b>Os method</b> used to return a unicode object representing the current working directory. | os.getcwdu() 
<b>Os method</b> used to return true if the file descriptor fd is open and connected to a tty(-like) device, else false. | os.isatty(fd) 
<b>Os method</b> used to set the flags of path to the numeric flags, like chflags(), but do not follow symbolic links. | os.lchflags(path, flags) 
<b>Os method</b> used to change the mode of path to the numeric mode. | os.lchmod(path, mode) 
<b>Os method</b> used to change the owner and group id of path to the numeric uid and gid. this function will not follow symbolic links. | os.lchown(path, uid, gid) 
<b>Os method</b> used to create a hard link pointing to src named dst. | os.link(src, dst) 
<b>Os method</b> used to return a list containing the names of the entries in the directory given by path. | os.listdir(path) 
<b>Os method</b> used to set the current position of file descriptor fd to position pos, modified by how. | os.lseek(fd, pos, how) 
<b>Os method</b> used to like stat(), but do not follow symbolic links. | os.lstat(path) 
<b>Os method</b> used to extract the device major number from a raw device number. | os.major(device) 
<b>Os method</b> used to compose a raw device number from the major and minor device numbers. | os.makedev(major, minor) 
<b>Os method</b> used to recursive directory creation function. | os.makedirs(path[, mode]) 
<b>Os method</b> used to extract the device minor number from a raw device number. | os.minor(device) 
<b>Os method</b> used to create a directory named path with numeric mode mode. | os.mkdir(path[, mode]) 
<b>Os method</b> used to create a fifo (a named pipe) named path with numeric mode mode. the default mode is 0666 (octal). | os.mkfifo(path[, mode]) 
<b>Os method</b> used to create a filesystem node (file, device special file or named pipe) named filename. | os.mknod(filename[, mode=0600, device]) 
<b>Os method</b> used to open the file file and set various flags according to flags and possibly its mode according to mode. | os.open(file, flags[, mode]) 
<b>Os method</b> used to open a new pseudo-terminal pair. return a pair of file descriptors (master, slave) for the pty and the tty, respectively. | os.openpty() 
<b>Os method</b> used to return system configuration information relevant to a named file. | os.pathconf(path, name) 
<b>Os method</b> used to create a pipe. return a pair of file descriptors (r, w) usable for reading and writing, respectively. | os.pipe() 
<b>Os method</b> used to open a pipe to or from command. | os.popen(command[, mode[, bufsize]]) 
<b>Os method</b> used to read at most n bytes from file descriptor fd. return a string containing the bytes read. if the end of the file referred to by fd has been reached, an empty string is returned. | os.read(fd, n) 
<b>Os method</b> used to return a string representing the path to which the symbolic link points. | os.readlink(path) 
<b>Os method</b> used to remove the file path. | os.remove(path) 
<b>Os method</b> used to remove directories recursively. | os.removedirs(path) 
<b>Os method</b> used to rename the file or directory src to dst. | os.rename(src, dst) 
<b>Os method</b> used to recursive directory or file renaming function. | os.renames(old, new) 
<b>Os method</b> used to remove the directory path | os.rmdir(path) 
<b>Os method</b> used to perform a stat system call on the given path. | os.stat(path) 
<b>Os method</b> used to determine whether stat_result represents time stamps as float objects. | os.stat_float_times([newvalue]) 
<b>Os method</b> used to perform a statvfs system call on the given path. | os.statvfs(path) 
<b>Os method</b> used to create a symbolic link pointing to src named dst. | os.symlink(src, dst) 
<b>Os method</b> used to return the process group associated with the terminal given by fd (an open file descriptor as returned by open()). | os.tcgetpgrp(fd) 
<b>Os method</b> used to set the process group associated with the terminal given by fd (an open file descriptor as returned by open()) to pg. | os.tcsetpgrp(fd, pg) 
<b>Os method</b> used to return a unique path name that is reasonable for creating a temporary file. | os.tempnam([dir[, prefix]]) 
<b>Os method</b> used to return a new file object opened in update mode (w+b). | os.tmpfile() 
<b>Os method</b> used to return a unique path name that is reasonable for creating a temporary file. | os.tmpnam() 
<b>Os method</b> used to return a string which specifies the terminal device associated with file descriptor fd. if fd is not associated with a terminal device, an exception is raised. | os.ttyname(fd) 
<b>Os method</b> used to remove the file path. | os.unlink(path) 
<b>Os method</b> used to set the access and modified times of the file specified by path. | os.utime(path, times) 
<b>Os method</b> used to generate the file names in a directory tree by walking the tree either top-down or bottom-up. | os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]]) 
<b>Os method</b> used to write the string str to file descriptor fd. return the number of bytes actually written. | os.write(fd, str) 
