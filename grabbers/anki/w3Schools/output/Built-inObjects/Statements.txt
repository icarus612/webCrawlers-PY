<b>Statements statement</b>: break; | <b>Statements statement</b> that exits a switch or a loop. |  | break; | let text = "";<br/> for (let i = 0; i &lt; 5; i++) {<br/>   if (i === 3) break;<br/>   text += i + "&lt;br&gt;";<br/> } |  
<b>Statements statement</b>: class <em>className</em> {<br/>      // class body<br/>  } | <b>Statements statement</b> that declares a class. |  | class <em>className</em> {<br/>      // class body<br/>  } | // Create a Car class<br/> class Car {<br/>   constructor(brand) {<br/>     this.carname = brand;<br/>    }<br/> }<br/> <br/> // Create a Car Object<br/> myCar = new Car("Ford"); |  
<b>Statements statement</b>: const <em>name</em> = <em>value</em>; | <b>Statements statement</b> that declares a variable with a constant value. |  | const <em>name</em> = <em>value</em>; | // Create an array:<br/> const cars = ["Saab", "Volvo", "BMW"];<br/> <br/> // Change an element:<br/> cars[0] = "Toyota";<br/> <br/> // Add an element:<br/> cars.push("Audi"); |  
<b>Statements statement</b>: continue; | <b>Statements statement</b> that breaks one iteration (in the loop) if a specified condition occurs, and  continues with the next iteration in the loop. |  | continue; | let text = "";<br/> for (let i = 0; i &lt; 5; i++) {<br/>   if (i === 3) continue;<br/>   text += i + "&lt;br&gt;";<br/> } |  
<b>Statements statement</b>: debugger; | <b>Statements statement</b> that stops the execution of javascript, and calls (if available) the debugging function. |  | debugger; | let x = 15 * 5;<br/>debugger;<br/>document.getElementbyId("demo").innerHTML = x; |  
<b>Statements statement</b>: do {<br/> <i>  code block to be executed<br/> </i>}<br/> while (<em>condition</em>); | <b>Statements statement</b> that executes a block of statements and repeats the block while a condition is  true. |  | do {<br/> <i>  code block to be executed<br/> </i>}<br/> while (<em>condition</em>); | let text = "";<br/> let i = 0;<br/> do {<br/>   text += i + "&lt;br&gt;";<br/>     i++;<br/>  }<br/> while (i &lt; 5); |  
<b>Statements statement</b>: <i>for (statement 1; statement 2; statement 3) {<br/>  code block to be executed<br/>}</i> | <b>Statements statement</b> that loops through a block of code a number of times. |  | <i>for (statement 1; statement 2; statement 3) {<br/>  code block to be executed<br/>}</i> | for (let i = 0; i &lt; 5; i++) {<br/>   text += i + "&lt;br&gt;";<br/>} |  
<b>Statements statement</b>: <i>for (x</i> in  <i>object) {<br/>  code block to be executed<br/>}</i> | <b>Statements statement</b> that loops through the properties of an object. |  | <i>for (x</i> in  <i>object) {<br/>  code block to be executed<br/>}</i> | const person = {fname:"John", lname:"Doe", age:25};<br/> let text = "";<br/> for (let x in person) {<br/>     text += person[x] + " ";<br/>  } |  
<b>Statements statement</b>: <i>for (x</i> of  <i>iterable) {<br/>  code block to be executed<br/>}</i> | <b>Statements statement</b> that loops through the values of an iterable object. |  | <i>for (x</i> of  <i>iterable) {<br/>  code block to be executed<br/>}</i> | let text = "";<br/> const cars = ['BMW', 'Volvo', 'Mini'];<br/> for (let x of cars) {<br/>     text += x + " ";<br/> } |  
<b>Statements statement</b>: function <i><em>functionName</em></i>(<i><em>parameter</em>s</i>)<i> {<br/>     <em>code to be executed</em><br/> } </i> | <b>Statements statement</b> that declares a function. |  | function <i><em>functionName</em></i>(<i><em>parameter</em>s</i>)<i> {<br/>     <em>code to be executed</em><br/> } </i> | // Declare a function<br/> function myFunction() {<br/>   document.getElementById("demo").innerHTML = "Hello World!";<br/> }<br/> <br/> // Call the function<br/> myFunction(); |  
<b>Statements statement</b>: if ... else ... else if | <b>Statements statement</b> that marks a block of statements to be executed depending on a condition. |  |  | let hour = new Date().getHours();<br/> if (hour &lt; 20) {<br/>    document.getElementById("demo").innerHTML = "Good day";<br/>  } |  
<b>Statements statement</b>: let <em>name</em> = <em>value</em>; | <b>Statements statement</b> that declares a variable. |  | let <em>name</em> = <em>value</em>; | let carName = "Volvo"; |  
<b>Statements statement</b>: return <em>value</em>; | <b>Statements statement</b> that stops the execution of a function and returns a value from that function. |  | return <em>value</em>; | function myFunction() {<br/>  return Math.PI;<br/>} |  
<b>Statements statement</b>: switch(<em>expression</em>) {<br/>     case <em>n</em>:<br/> <em>    code block<br/> </em>    break;<br/>     case <em>n</em>:<br/> <em>    code block<br/> </em>    break;<br/>   default:<br/> <em>    default code block<br/> </em>} | <b>Statements statement</b> that marks a block of statements to be executed depending on different cases. |  | switch(<em>expression</em>) {<br/>     case <em>n</em>:<br/> <em>    code block<br/> </em>    break;<br/>     case <em>n</em>:<br/> <em>    code block<br/> </em>    break;<br/>   default:<br/> <em>    default code block<br/> </em>} | var text;<br/>var fruits = document.getElementById("myInput").value;<br/><br/>  switch(fruits) {<br/>  case "Banana":<br/>    text = "Banana is good!";<br/>       break;<br/>     case "Orange":<br/>    text = "I am not a fan of orange.";<br/>       break;<br/>  case "Apple":<br/>    text = "How you like them apples?";<br/>       break;<br/>  default:<br/>        text = "I have never heard of that fruit...";<br/>} |  
<b>Statements statement</b>: throw <em>expression</em>; | <b>Statements statement</b> that throws (generates) an error. |  | throw <em>expression</em>; | &lt;p&gt;Please input a number between  5 and 10:&lt;/p&gt;<br/><br/>&lt;input id="demo" type="text"&gt;<br/>&lt;button type="button"  onclick="myFunction()"&gt;Test Input&lt;/button&gt;<br/>&lt;p id="message"&gt;&lt;/p&gt;<br/><br/> &lt;script&gt;<br/>function myFunction() {<br/>   const message = document.getElementById("message");<br/>   message.innerHTML = "";<br/>   let x =  document.getElementById("demo").value;<br/>   try { <br/>     if(x == "") throw "is Empty";<br/>     if(isNaN(x)) throw "not a number";<br/>     if(x &gt; 10) throw "too high";<br/>     if(x &lt; 5) throw "too low";<br/>  }<br/>  catch(err) {<br/>    message.innerHTML =  "Input " + err;<br/>  }<br/>}<br/>&lt;/script&gt; |  
<b>Statements statement</b>: try {<br/>  <em>tryCode - Code block to run<br/></em>}<br/>catch(<em>err</em>) {<br/>     <em>  catchCode -  Code block to handle errors<br/></em>} <br/>finally {<br/>  <em>  finallyCode - Code block to be executed regardless of the try result<br/></em>} | <b>Statements statement</b> that marks the block of statements to be executed when an error occurs in a try  block, and implements error handling. |  | try {<br/>  <em>tryCode - Code block to run<br/></em>}<br/>catch(<em>err</em>) {<br/>     <em>  catchCode -  Code block to handle errors<br/></em>} <br/>finally {<br/>  <em>  finallyCode - Code block to be executed regardless of the try result<br/></em>} | &lt;p id="demo"&gt;&lt;/p&gt;<br/><br/>&lt;script&gt;<br/>  try {<br/>  adddlert("Welcome guest!");<br/>}<br/>catch(err) {<br/>  document.getElementById("demo").innerHTML = err.message;<br/>}<br/>&lt;/script&gt;<br/> |  
<b>Statements statement</b>: var <em>name</em> = <em>value</em>; | <b>Statements statement</b> that declares a variable. |  | var <em>name</em> = <em>value</em>; | var carName = "Volvo"; |  
<b>Statements statement</b>: <i>while (condition) {<br/>  code block to be executed<br/>}</i> | <b>Statements statement</b> that marks a block of statements to be executed while a condition is true. |  | <i>while (condition) {<br/>  code block to be executed<br/>}</i> | let text = "";<br/> let i = 0;<br/> while (i &lt; 5) {<br/>  text += i + "&lt;br&gt;";<br/>     i++;<br/>} |  
