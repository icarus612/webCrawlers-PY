<b>Array name</b>: <i>array1</i>.concat(<em>array2</em>,<em> array3</em>, ...,<em> arrayX</em>) | <b>Array name</b> that joins arrays and returns an array with the joined arrays. |  | <i>array1</i>.concat(<em>array2</em>,<em> array3</em>, ...,<em> arrayX</em>) | const arr1 = ["Cecilie", "Lone"];<br/> const arr2 = ["Emil", "Tobias", "Linus"];<br/> const children = arr1.concat(arr2); |  
<b>Array name</b>: <i>array</i>.constructor | <b>Array name</b> that returns the function that created the array object's prototype. |  | <i>array</i>.constructor | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> let text = fruits.constructor;<br/> |  
<b>Array name</b>: <i>array</i>.copyWithin(<em>target, start, end</em>) | <b>Array name</b> that copies array elements within the array, to and from specified positions. |  | <i>array</i>.copyWithin(<em>target, start, end</em>) | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> fruits.copyWithin(2, 0); |  
<b>Array name</b>: <i>array</i>.entries() | <b>Array name</b> that returns a key/value pair array iteration object. |  | <i>array</i>.entries() | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> const f = fruits.entries();<br/><br/>for (let x of f) {<br/>   document.getElementById("demo").innerHTML += x;<br/>} |  
<b>Array name</b>: <i>array</i>.every(<em>function(currentValue, index, arr), thisValue</em>) | <b>Array name</b> that checks if every element in an array pass a test. |  | <i>array</i>.every(<em>function(currentValue, index, arr), thisValue</em>) | const ages = [32, 33, 16, 40];<br/><br/> ages.every(checkAge)<br/> <br/> function checkAge(age) {<br/>  return age &gt; 18;<br/>}<br/> |  
<b>Array name</b>: <i>array</i>.fill(<em>value, start, end</em>) | <b>Array name</b> that fill the elements in an array with a static value. |  | <i>array</i>.fill(<em>value, start, end</em>) | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> fruits.fill("Kiwi"); |  
<b>Array name</b>: <i>array</i>.filter(<em>function(currentValue, index, arr), thisValue</em>) | <b>Array name</b> that creates a new array with every element in an array that pass a test. |  | <i>array</i>.filter(<em>function(currentValue, index, arr), thisValue</em>) | const ages = [32, 33, 16, 40];<br/> const result = ages.filter(checkAdult);<br/> <br/> function checkAdult(age) {<br/>   return age &gt;= 18;<br/>}<br/> |  
<b>Array name</b>: <i>array</i>.find(<em>function(currentValue, index, arr),thisValue</em>) | <b>Array name</b> that returns the value of the first element in an array that pass a test. |  | <i>array</i>.find(<em>function(currentValue, index, arr),thisValue</em>) | const ages = [3, 10, 18, 20];<br/><br/> function checkAge(age) {<br/>  return age &gt; 18;<br/>}<br/><br/>function myFunction() {<br/>     document.getElementById("demo").innerHTML = ages.find(checkAge);<br/>} |  
<b>Array name</b>: <i>array</i>.findIndex(<em>function(currentValue, index, arr), thisValue</em>) | <b>Array name</b> that returns the index of the first element in an array that pass a test. |  | <i>array</i>.findIndex(<em>function(currentValue, index, arr), thisValue</em>) | const ages = [3, 10, 18, 20];<br/><br/> ages.findIndex(checkAge);<br/><br/> function checkAge(age) {<br/>   return age &gt; 18;<br/> } |  
<b>Array name</b>: <i>array</i>.forEach(<em>function(currentValue, index, arr), thisValue</em>) | <b>Array name</b> that calls a function for each array element. |  | <i>array</i>.forEach(<em>function(currentValue, index, arr), thisValue</em>) | const fruits = ["apple", "orange", "cherry"];<br/>fruits.forEach(myFunction);<br/> |  
<b>Array name</b>: Array.from(<em>object, mapFunction, thisValue</em>) | <b>Array name</b> that creates an array from an object. |  | Array.from(<em>object, mapFunction, thisValue</em>) | Array.from("ABCDEFG") |  
<b>Array name</b>: <i>array</i>.includes(<em>element</em>,<em> start</em>) | <b>Array name</b> that check if an array contains the specified element. |  | <i>array</i>.includes(<em>element</em>,<em> start</em>) | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> fruits.includes("Mango"); |  
<b>Array name</b>: <i>array</i>.indexOf(<em>item</em>,<em> start</em>) | <b>Array name</b> that search the array for an element and returns its position. |  | <i>array</i>.indexOf(<em>item</em>,<em> start</em>) | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> let index = fruits.indexOf("Apple"); |  
<b>Array name</b>: Array.isArray<em>(obj</em>) | <b>Array name</b> that checks whether an object is an array. |  | Array.isArray<em>(obj</em>) | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> let result = Array.isArray(fruits); |  
<b>Array name</b>: <i>array</i>.join(<em>separator</em>) | <b>Array name</b> that joins all elements of an array into a string. |  | <i>array</i>.join(<em>separator</em>) | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> let text = fruits.join(); |  
<b>Array name</b>: <i>array</i>.keys() | <b>Array name</b> that returns a array iteration object, containing the keys of the original array. |  | <i>array</i>.keys() | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> const keys = fruits.keys();<br/><br/> let text = "";<br/> for (let x of keys) {<br/>   text += x + "&lt;br&gt;";<br/>} |  
<b>Array name</b>: <i>array</i>.lastIndexOf(<em>item</em>,<em> start</em>) | <b>Array name</b> that search the array for an element, starting at the end, and returns its position. |  | <i>array</i>.lastIndexOf(<em>item</em>,<em> start</em>) | const fruits = ["Apple", "Orange", "Apple", "Mango"];<br/> let index = fruits.lastIndexOf("Apple"); |  
<b>Array name</b>: length | <b>Array name</b> that sets or returns the number of elements in an array. |  |  | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> let length = fruits.length; |  
<b>Array name</b>: <i>array</i>.map(<em>function(currentValue, index, arr), thisValue</em>) | <b>Array name</b> that creates a new array with the result of calling a function for each array element. |  | <i>array</i>.map(<em>function(currentValue, index, arr), thisValue</em>) | const numbers = [4, 9, 16, 25];<br/> const newArr = numbers.map(Math.sqrt)<br/> |  
<b>Array name</b>: <i>array</i>.pop() | <b>Array name</b> that removes the last element of an array, and returns that element. |  | <i>array</i>.pop() | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> fruits.pop(); |  
<b>Array name</b>: Array.prototype.<i>name </i>=<em> value</em> | <b>Array name</b> that allows you to add properties and methods to an array object. |  | Array.prototype.<i>name </i>=<em> value</em> | Array.prototype.myUcase = function() {<br/>  for (let i = 0; i &lt; this.length; i++) {<br/>       this[i] = this[i].toUpperCase();<br/>  }<br/>}; |  
<b>Array name</b>: <i>array</i>.push(<em>item1</em>, <em>item2</em>, ..., <em>itemX</em>) | <b>Array name</b> that adds new elements to the end of an array, and returns the new length. |  | <i>array</i>.push(<em>item1</em>, <em>item2</em>, ..., <em>itemX</em>) | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> fruits.push("Kiwi"); |  
<b>Array name</b>: <i>array</i>.<span class="color_h1">reduce</span>(<em>function(total, currentValue, currentIndex, arr), initialValue</em>) | <b>Array name</b> that reduce the values of an array to a single value (going left-to-right). |  | <i>array</i>.<span class="color_h1">reduce</span>(<em>function(total, currentValue, currentIndex, arr), initialValue</em>) | const numbers = [175, 50, 25];<br/><br/>document.getElementById("demo").innerHTML    = numbers.reduce(myFunc);<br/><br/>function myFunc(total, num) {<br/>     return total - num;<br/>} |  
<b>Array name</b>: <i>array</i>.<span class="color_h1">reduceRight</span>(<em>function(total, currentValue, currentIndex, arr), initialValue</em>) | <b>Array name</b> that reduce the values of an array to a single value (going right-to-left). |  | <i>array</i>.<span class="color_h1">reduceRight</span>(<em>function(total, currentValue, currentIndex, arr), initialValue</em>) | const numbers = [175, 50, 25];<br/><br/> document.getElementById("demo").innerHTML    = numbers.reduceRight(myFunc);<br/><br/>function myFunc(total, num) {<br/>     return total - num;<br/>} |  
<b>Array name</b>: <i>array</i>.reverse() | <b>Array name</b> that reverses the order of the elements in an array. |  | <i>array</i>.reverse() | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> fruits.reverse(); |  
<b>Array name</b>: <i>array</i>.shift() | <b>Array name</b> that removes the first element of an array, and returns that element. |  | <i>array</i>.shift() | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> fruits.shift(); |  
<b>Array name</b>: <i>array</i>.slice(<em>start</em>,<em> end</em>) | <b>Array name</b> that selects a part of an array, and returns the new array. |  | <i>array</i>.slice(<em>start</em>,<em> end</em>) | const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];<br/> const citrus = fruits.slice(1, 3); |  
<b>Array name</b>: <i>array</i>.some(<em>function(value, index, arr), this</em>) | <b>Array name</b> that checks if any of the elements in an array pass a test. |  | <i>array</i>.some(<em>function(value, index, arr), this</em>) | const ages = [3, 10, 18, 20];<br/><br/> ages.some(checkAdult); <br/> function checkAdult(age) {<br/>  return age &gt; 18;<br/> } |  
<b>Array name</b>: <i>array</i>.sort(<em>compareFunction</em>) | <b>Array name</b> that sorts the elements of an array. |  | <i>array</i>.sort(<em>compareFunction</em>) | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> fruits.sort(); |  
<b>Array name</b>: <i>array</i>.splice(<em>index</em>,<em> howmany</em>,<em> item1</em>, .....,<em> itemX</em>) | <b>Array name</b> that adds/removes elements from an array. |  | <i>array</i>.splice(<em>index</em>,<em> howmany</em>,<em> item1</em>, .....,<em> itemX</em>) | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> <br/> fruits.splice(2, 0, "Lemon", "Kiwi"); |  
<b>Array name</b>: <i>array</i>.toString() | <b>Array name</b> that converts an array to a string, and returns the result. |  | <i>array</i>.toString() | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> let text = fruits.toString(); |  
<b>Array name</b>: <i>array</i>.unshift(<em>item1</em>,<em> item2</em>, ..., <em>itemX</em>) | <b>Array name</b> that adds new elements to the beginning of an array, and returns the new length. |  | <i>array</i>.unshift(<em>item1</em>,<em> item2</em>, ..., <em>itemX</em>) | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> fruits.unshift("Lemon","Pineapple"); |  
<b>Array name</b>: <i>array</i>.valueOf() | <b>Array name</b> that returns the primitive value of an array. |  | <i>array</i>.valueOf() | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> const myArray = fruits.valueOf(); |  
