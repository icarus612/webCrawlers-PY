<b>Classes method</b>: constructor(<em>parameters</em>) | <b>Classes method</b> that a special method for creating and initializing objects created within a class. |  | constructor(<em>parameters</em>) | class Car {<br/>    constructor(brand) {  // Constructor<br/>    this.carname = brand;<br/>    }<br/>}<br/>mycar = new Car("Ford"); |  
<b>Classes keyword</b>: class <em>childClass </em>extends <em>parentClass </em> | <b>Classes keyword</b> that extends a class (inherit). |  | class <em>childClass </em>extends <em>parentClass </em> | class Car {<br/>  constructor(brand) {<br/>    this.carname =    brand;<br/>    }<br/>  present() {<br/>    return 'I have a ' + this.carname;<br/>    }<br/>}<br/><br/>class Model <strong>extends</strong> Car {<br/>    constructor(brand, mod) {<br/>    super(brand);<br/>    this.model = mod;<br/>    }<br/>  show() {<br/>          return this.present() + ', it is a ' + this.model;<br/>    }<br/>}<br/><br/>mycar = new Model("Ford", "Mustang");<br/>document.getElementById("demo").innerHTML    = mycar.show(); |  
<b>Classes keyword</b>: static <em>methodName</em>() | <b>Classes keyword</b> that defines a static method for a class. |  | static <em>methodName</em>() | class Car {<br/>  constructor(brand) {<br/>    this.carname =    brand;<br/>    }<br/>  static hello() {  // static method<br/>    return "Hello!!";<br/>    }<br/>}<br/><br/>mycar = new Car("Ford");<br/><br/>//Call 'hello()' on    the class Car:<br/>document.getElementById("demo").innerHTML    = Car.hello();<br/><br/>//and NOT on the 'mycar' object:<br/>//document.getElementById("demo").innerHTML    = mycar.hello();<br/>//this would raise an error. |  
<b>Classes keyword</b>: super(<em>arguments</em>);  // calls the parent constructor (only inside    the constructor)<br/> super.<em>parentMethod</em>(<em>arguments</em>);  // calls a parent method | <b>Classes keyword</b> that refers to the parent class. |  | super(<em>arguments</em>);  // calls the parent constructor (only inside    the constructor)<br/> super.<em>parentMethod</em>(<em>arguments</em>);  // calls a parent method | class Car {<br/>  constructor(brand) {<br/>    this.carname =    brand;<br/>    }<br/>  present() {<br/>    return 'I have a ' + this.carname;<br/>    }<br/>}<br/><br/>class Model <strong>extends</strong> Car {<br/>    constructor(brand, mod) {<br/>    <strong>super(brand);</strong><br/>    this.model = mod;<br/>    }<br/>  show() {<br/>          return this.present() + ', it is a ' + this.model;<br/>    }<br/>}<br/><br/>mycar = new Model("Ford", "Mustang");<br/>document.getElementById("demo").innerHTML    = mycar.show(); |  
