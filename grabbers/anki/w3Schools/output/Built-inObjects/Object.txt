<b>Object name</b>: <i>object</i>.constructor | <b>Object name</b> that returns the function that created an object's prototype. |  | <i>object</i>.constructor | const person = {<br/>   firstName: "John",<br/>   lastName: "Doe",<br/>   age: 50,<br/>   eyeColor: "blue"<br/> };<br/> <br/> let text = person.constructor;<br/> |  
<b>Object name</b>: Object.keys(<i>object</i>) | <b>Object name</b> that returns an array iterator object with the keys of an object. |  | Object.keys(<i>object</i>) | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> const keys = Object.keys(fruits); |  
<b>Object name</b>: <em>object</em>.prototype.<em>name</em> = <em>value</em> | <b>Object name</b> that let you to add properties and methods to javascript objects. |  | <em>object</em>.prototype.<em>name</em> = <em>value</em> | function employee(name, jobtitle, born) {<br/>     this.name = name;<br/>     this.jobtitle = jobtitle;<br/>   this.born = born;<br/> }<br/> employee.prototype.salary = 2000;<br/> <br/> const fred = new employee("Fred Flintstone", "Caveman", 1970); |  
<b>Object name</b>: <i>object</i>.toString() | <b>Object name</b> that converts an object to a string and returns the result. |  | <i>object</i>.toString() | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> let text = fruits.toString(); |  
<b>Object name</b>: <i>object</i>.valueOf() | <b>Object name</b> that returns the primitive value of an object. |  | <i>object</i>.valueOf() | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> const myArray = fruits.valueOf(); |  
