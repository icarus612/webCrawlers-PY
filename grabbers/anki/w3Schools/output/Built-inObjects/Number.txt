<b>Number name</b>: <i>number</i>.constructor | <b>Number name</b> that returns the function that created javascript's number prototype. |  | <i>number</i>.constructor | let num = 134.5;<br/> let text = num.constructor; |  
<b>Number name</b>: Number.isFinite(<em>value</em>) | <b>Number name</b> that checks whether a value is a finite number. |  | Number.isFinite(<em>value</em>) | Number.isFinite(123)<br/> |  
<b>Number name</b>: Number.isInteger(<em>value</em>) | <b>Number name</b> that checks whether a value is an integer. |  | Number.isInteger(<em>value</em>) | Number.isInteger(123);<br/> Number.isInteger(-123);<br/> Number.isInteger('123');<br/> |  
<b>Number name</b>: Number.isNaN(<em>value</em>) | <b>Number name</b> that checks whether a value is number.nan. |  | Number.isNaN(<em>value</em>) | Number.isNaN(123);<br/> Number.isNaN(-1.23);<br/> Number.isNaN('123');<br/> Number.isNaN(0/0); |  
<b>Number name</b>: Number.isSafeInteger(<em>value</em>) | <b>Number name</b> that checks whether a value is a safe integer. |  | Number.isSafeInteger(<em>value</em>) | Number.isSafeInteger(123);<br/> Number.isSafeInteger(-123);<br/> Number.isSafeInteger('123');<br/> |  
<b>Number name</b>: Number.MAX_VALUE | <b>Number name</b> that returns the largest number possible in javascript. |  | Number.MAX_VALUE | let x = Number.MAX_VALUE; |  
<b>Number name</b>: Number.MIN_VALUE | <b>Number name</b> that returns the smallest number possible in javascript. |  | Number.MIN_VALUE | let x = Number.MIN_VALUE; |  
<b>Number name</b>: Number.NEGATIVE_INFINITY | <b>Number name</b> that represents negative infinity (returned on overflow). |  | Number.NEGATIVE_INFINITY | let x = Number.NEGATIVE_INFINITY; |  
<b>Number name</b>: Number.NaN | <b>Number name</b> that represents a "not-a-number" value. |  | Number.NaN | let x = Number.NaN; |  
<b>Number name</b>: Number.POSITIVE_INFINITY | <b>Number name</b> that represents infinity (returned on overflow). |  | Number.POSITIVE_INFINITY | let x = Number.POSITIVE_INFINITY; |  
<b>Number name</b>: Number.prototype.<em>name </em>=<em> value</em> | <b>Number name</b> that allows you to add properties and methods to an object. |  | Number.prototype.<em>name </em>=<em> value</em> | Number.prototype.myMethod = function() {<br/>   Â  return this.valueOf() / 2;<br/> }; |  
<b>Number name</b>: <i>number</i>.toExponential(<em>x</em>) | <b>Number name</b> that converts a number into an exponential notation. |  | <i>number</i>.toExponential(<em>x</em>) | let num = 5.56789;<br/> let n = num.toExponential(); |  
<b>Number name</b>: <i>number</i>.toFixed(<em>x</em>) | <b>Number name</b> that formats a number with x numbers of digits after the decimal point. |  | <i>number</i>.toFixed(<em>x</em>) | let num = 5.56789;<br/> let n = num.toFixed(); |  
<b>Number name</b>: <i>number</i>.toLocaleString(<em>locales</em>, <em>options</em>) | <b>Number name</b> that converts a number into a string, based on the locale settings. |  | <i>number</i>.toLocaleString(<em>locales</em>, <em>options</em>) | let num = 1000000;<br/> let text = num.toLocaleString(); |  
<b>Number name</b>: <i>number</i>.toPrecision(x) | <b>Number name</b> that formats a number to x length. |  | <i>number</i>.toPrecision(x) | let num = 13.3714;<br/> let n = num.toPrecision(2); |  
<b>Number name</b>: <i>number</i>.toString(<em>radix</em>) | <b>Number name</b> that converts a number to a string. |  | <i>number</i>.toString(<em>radix</em>) | let num = 15;<br/> let text = num.toString(); |  
<b>Number name</b>: <i>number</i>.valueOf() | <b>Number name</b> that returns the primitive value of a number. |  | <i>number</i>.valueOf() | let num = 15;<br/> let n = num.valueOf(); |  
