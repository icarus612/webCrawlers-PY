<b>Window property</b>: window.closed | <b>Window property</b> that returns a boolean true if a window is closed.. |  | window.closed | function checkWin() {<br/>  if (!myWindow) {<br/>     text = "It has never been opened!";<br/>   } else {<br/>       if (myWindow.closed) { <br/>         text = "It is closed.";<br/>     } else {<br/>       text = "It is open.";<br/>       }<br/>     } <br/> } |  
<b>Window property</b>: console | <b>Window property</b> that returns the console object for the window.     see also the console object.. |  |  | window.console.error("You made a mistake"); |  
<b>Window property</b>: window.defaultStatus | <b>Window property</b> that deprecated.. |  | window.defaultStatus | window.defaultStatus = "Default text in the status bar!"<br/> |  
<b>Window property</b>: document | <b>Window property</b> that returns the document object for the window.     see also the document object.. |  |  | let url = window.document.URL; |  
<b>Window property</b>: frameelement | <b>Window property</b> that returns the frame in which the window runs.. |  |  | if (window.frameElement) {<br/>   let answer = "YES";<br/> } |  
<b>Window property</b>: window.frames | <b>Window property</b> that returns all window objects running in the window.. |  | window.frames | window.frames[0].location = "https://www.w3schools.com/jsref/"; |  
<b>Window property</b>: history | <b>Window property</b> that returns the history object for the window.     see also the history object.. |  |  | let length = window.history.length; |  
<b>Window property</b>: innerheight | <b>Window property</b> that returns the height of the window's content area (viewport) including      scrollbars. |  |  | let height = window.innerHeight; |  
<b>Window property</b>: innerwidth | <b>Window property</b> that returns the width of a window's content area (viewport) including      scrollbars. |  |  | let width = window.innerWidth; |  
<b>Window property</b>: window.length | <b>Window property</b> that returns the number of <iframe> elements in the current window. |  | window.length | let length = window.length; |  
<b>Window property</b>: localstorage | <b>Window property</b> that allows to save key/value pairs in a web browser. stores the data with no expiration date. |  |  | localStorage.setItem("lastname", "Smith");<br/> localStorage.getItem("lastname"); |  
<b>Window property</b>: location | <b>Window property</b> that returns the location object for the window.     see also the the location object.. |  |  | let origin = window.location.origin; |  
<b>Window property</b>: name | <b>Window property</b> that sets or returns the name of a window. |  |  | let name = window.name; |  
<b>Window property</b>: navigator | <b>Window property</b> that returns the navigator object for the window.     see also the navigator object.. |  |  | let url = window.navigator.language; |  
<b>Window property</b>: <i>window</i>.opener | <b>Window property</b> that returns a reference to the window that created the window. |  | <i>window</i>.opener | const myWindow = window.open("", "", "width=300,height=300");<br/> myWindow.opener.document.getElementById("demo").innerHTML = "HELLO!"; |  
<b>Window property</b>: outerheight | <b>Window property</b> that returns the height of the browser window, including toolbars/scrollbars. |  |  | let height = window.outerHeight; |  
<b>Window property</b>: outerwidth | <b>Window property</b> that returns the width of the browser window, including toolbars/scrollbars. |  |  | let width = window.outerWidth; |  
<b>Window property</b>: pagexoffset | <b>Window property</b> that returns the pixels the current document has been scrolled (horizontally) from the upper left corner of the window. |  |  | window.scrollBy(100, 100);<br/>  alert(window.pageXOffset + window.pageYOffset);<br/> |  
<b>Window property</b>: pageyoffset | <b>Window property</b> that returns the pixels the current document has been scrolled (vertically) from the upper left corner of the window. |  |  | window.scrollBy(100, 100);<br/>  alert(window.pageXOffset + window.pageYOffset);<br/> |  
<b>Window property</b>: parent | <b>Window property</b> that returns the parent window of the current window. |  |  | parent.document.body.style.backgroundColor = "lightblue"; |  
<b>Window property</b>: screen | <b>Window property</b> that returns the screen object for the window     see also the screen object. |  |  |  |  
<b>Window property</b>: window.screenLeft | <b>Window property</b> that returns the horizontal coordinate of the window relative to the screen. |  | window.screenLeft | let x = window.screenLeft;<br/> let y = window.screenTop; |  
<b>Window property</b>: window.screenTop | <b>Window property</b> that returns the vertical coordinate of the window relative to the screen. |  | window.screenTop | let x = window.screenLeft;<br/> let y = window.screenTop; |  
<b>Window property</b>: screenx | <b>Window property</b> that returns the horizontal coordinate of the window relative to the screen. |  |  | const myWin = window.open("", "", "left=700,top=350,width=200,height=100");<br/> let x = myWin.screenX;<br/> let y = myWin.screenY; |  
<b>Window property</b>: screeny | <b>Window property</b> that returns the vertical coordinate of the window relative to the screen. |  |  | const myWin = window.open("", "", "left=700,top=350,width=200,height=100");<br/> let x = myWin.screenX;<br/> let y = myWin.screenY; |  
<b>Window property</b>: sessionstorage | <b>Window property</b> that allows to save key/value pairs in a web browser. stores the data for one      session. |  |  | sessionStorage.setItem("lastname", "Smith");<br/> sessionStorage.getItem("lastname"); |  
<b>Window property</b>: scrollx | <b>Window property</b> that an alias of pagexoffset. |  |  | window.scrollBy(100, 100);<br/>  alert(window.scrollX + window.scrollY);<br/> |  
<b>Window property</b>: scrolly | <b>Window property</b> that an alias of pageyoffset. |  |  | window.scrollBy(100, 100);<br/>  alert(window.scrollX + window.scrollY);<br/> |  
<b>Window property</b>: window.self | <b>Window property</b> that returns the current window. |  | window.self | if (window.top != window.self) {<br/>   text = "This window is NOT the topmost window!";<br/> } else {<br/>   text = "This window is the topmost window!";<br/> } |  
<b>Window property</b>: window.status | <b>Window property</b> that deprecated. avoid using it.. |  | window.status | window.status = "Some text in the status bar!!";<br/> |  
<b>Window property</b>: window.top | <b>Window property</b> that returns the topmost browser window. |  | window.top | if (window.top != window.self) {<br/>   text = "This window is NOT the topmost window!";<br/> } else {<br/>   text = "This window is the topmost window!";<br/> } |  
alert(<em>message</em>) | <b>Window method</b> that displays an alert box with a message and an ok button. |  | alert(<em>message</em>) | alert("Hello! I am an alert box!!");<br/> |  
window.atob(<em>encoded</em>) | <b>Window method</b> that decodes a base-64 encoded string. |  | window.atob(<em>encoded</em>) | let text = "Hello World!";<br/> let encoded = window.btoa(text);<br/> let decoded = window.atob(encoded);<br/> |  
window.blur() | <b>Window method</b> that removes focus from the current window. |  | window.blur() | const myWindow = window.open("", "", "width=200, height=100");<br/> myWindow.blur(); |  
window.btoa(<em>string</em>) | <b>Window method</b> that encodes a string in base-64. |  | window.btoa(<em>string</em>) | let text = "Hello World!";<br/> let encoded = window.btoa(text); |  
clearInterval(<i>intervalId</i>) | <b>Window method</b> that clears a timer set with setinterval(). |  | clearInterval(<i>intervalId</i>) | const myInterval = setInterval(myTimer, 1000);<br/><br/> function myTimer() {<br/>   const date = new Date();<br/>   document.getElementById("demo").innerHTML = date.toLocaleTimeString();<br/> }<br/><br/> function myStopFunction() { <br/>  clearInterval(myInterval);<br/>} |  
clearTimeout(<i>id_of_settimeout</i>) | <b>Window method</b> that clears a timer set with settimeout(). |  | clearTimeout(<i>id_of_settimeout</i>) | const myTimeout = setTimeout(myGreeting, 3000);<br/> <br/> function myGreeting() {<br/>   document.getElementById("demo").innerHTML = "Happy Birthday to You !!"<br/> }<br/> <br/> function myStopFunction() {<br/>   clearTimeout(myTimeout);<br/> } |  
window.close() | <b>Window method</b> that closes the current window. |  | window.close() | let myWindow;<br/> <br/> function openWin() {<br/>   myWindow = window.open("", "myWindow", "width=200, height=100");<br/> }<br/> <br/> function closeWin() {<br/>   myWindow.close();<br/> } |  
confirm(<em>message</em>) | <b>Window method</b> that displays a dialog box with a message and an ok and a cancel button. |  | confirm(<em>message</em>) | confirm("Press a button!");<br/> |  
window.focus() | <b>Window method</b> that sets focus to the current window. |  | window.focus() | const myWindow = window.open("", "", "width=200, height=100"); myWindow.focus(); |  
<i>window</i>.getComputedStyle(<em>element, pseudoElement</em>) | <b>Window method</b> that gets the current computed css styles applied to an element. |  | <i>window</i>.getComputedStyle(<em>element, pseudoElement</em>) | const element = document.getElementById("test");<br/> const cssObj = window.getComputedStyle(element, null);<br/> <br/> let bgColor = cssObj.getPropertyValue("background-color"); |  
<i>window</i>.matchMedia(<em>mediaQuery</em>) | <b>Window method</b> that returns a mediaquerylist object representing the specified css media query string. |  | <i>window</i>.matchMedia(<em>mediaQuery</em>) | if (window.matchMedia("(max-width: 700px)").matches) {<br/>   // Viewport is less or equal to 700 pixels wide<br/> } else {<br/>   // Viewport is greater than 700 pixels wide<br/> } |  
window.moveBy(<em>x, y</em>) | <b>Window method</b> that moves a window relative to its current position. |  | window.moveBy(<em>x, y</em>) | function openWin() {<br/>   myWindow = window.open('', '', 'width=400, height=400');<br/> }<br/> <br/> function moveWin() {<br/>   myWindow.moveBy(250, 250);<br/> } |  
window.moveTo(<em>x, y</em>) | <b>Window method</b> that moves a window to the specified position. |  | window.moveTo(<em>x, y</em>) | function openWin() {<br/>   myWindow = window.open('', '', 'width=400, height=200');<br/> }<br/> <br/> function moveWin() {<br/>   myWindow.moveTo(500, 100);<br/> } |  
window.open(<i>URL, name, specs, replace</i>) | <b>Window method</b> that opens a new browser window. |  | window.open(<i>URL, name, specs, replace</i>) | window.open("https://www.w3schools.com"); |  
window.print() | <b>Window method</b> that prints the content of the current window. |  | window.print() | window.print();<br/> |  
prompt(<i>text, defaultText</i>) | <b>Window method</b> that displays a dialog box that prompts the visitor for input. |  | prompt(<i>text, defaultText</i>) | let person = prompt("Please enter your name", "Harry Potter");<br/><br/>if (person != null) {<br/>  document.getElementById("demo").innerHTML =<br/>  "Hello " + person + "! How are you today?";<br/>} |  
resizeBy(<i>width, height</i>) | <b>Window method</b> that resizes the window by the specified pixels. |  | resizeBy(<i>width, height</i>) | function openWin() {<br/>   myWindow = window.open("", "", "width=100, height=100");<br/> }<br/><br/> function resizeWin() {<br/>   myWindow.resizeBy(250, 250);<br/> }<br/> |  
<em>window</em>.resizeTo(<i>width, height</i>) | <b>Window method</b> that resizes the window to the specified width and height. |  | <em>window</em>.resizeTo(<i>width, height</i>) | function openWin() {<br/>   myWindow = window.open("", "", "width=200, height=100");<br/> }<br/> <br/> function resizeWin() {<br/>   myWindow.resizeTo(300, 300);<br/> } |  
scroll() | <b>Window method</b> that deprecated. this method has been replaced by the scrollto() method.. |  |  | window.scrollTo(500, 0); |  
scrollby() | <b>Window method</b> that scrolls the document by the specified number of pixels. |  |  | window.scrollBy(100, 0); |  
scrollto() | <b>Window method</b> that scrolls the document to the specified coordinates. |  |  | window.scrollTo(500, 0); |  
setInterval(<em>function, milliseconds, param1, param2, ...</em>) | <b>Window method</b> that calls a function or evaluates an expression at specified intervals (in milliseconds). |  | setInterval(<em>function, milliseconds, param1, param2, ...</em>) | setInterval(function () {element.innerHTML += "Hello"}, 1000); |  
setTimeout(<em>function, milliseconds, param1, param2, ...</em>) | <b>Window method</b> that calls a function or evaluates an expression after a specified number of milliseconds. |  | setTimeout(<em>function, milliseconds, param1, param2, ...</em>) | const myTimeout = setTimeout(myGreeting, 5000);<br/> |  
window.stop() | <b>Window method</b> that stops the window from loading. |  | window.stop() | window.stop();<br/> |  
