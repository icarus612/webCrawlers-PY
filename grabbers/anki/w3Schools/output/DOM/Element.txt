<b>Element property / method</b>: accesskey | <b>Element property / method</b> that sets or returns the accesskey attribute of an element. |  |  | document.getElementById("myAnchor").accessKey = "w"; |  
<b>Element property / method</b>: <em>element</em>.addEventListener(<em>event</em>, <em>function</em>, <em>useCapture</em>) | <b>Element property / method</b> that attaches an event handler to an element. |  | <em>element</em>.addEventListener(<em>event</em>, <em>function</em>, <em>useCapture</em>) | element.addEventListener("click", myFunction);<br/><br/>function myFunction() {<br/>  document.getElementById("demo").innerHTML = "Hello World";<br/>  }<br/> |  
<b>Element property / method</b>: appendchild() | <b>Element property / method</b> that adds (appends) a new child node to an element. |  |  | const node = document.createElement("li");<br/> const textnode = document.createTextNode("Water");<br/> node.appendChild(textnode);<br/> document.getElementById("myList").appendChild(node); |  
<b>Element property / method</b>: <em>node</em>.attributes | <b>Element property / method</b> that returns a namednodemap of an element's attributes. |  | <em>node</em>.attributes | let numb = document.getElementById("myImg").attributes.length; |  
<b>Element property / method</b>: <em>HTMLElementObject</em>.blur() | <b>Element property / method</b> that removes focus from an element. |  | <em>HTMLElementObject</em>.blur() | document.getElementById("myText").blur(); |  
<b>Element property / method</b>: <em>element</em>.childElementCount | <b>Element property / method</b> that returns an elements's number of child elements. |  | <em>element</em>.childElementCount | let numb = document.getElementById("myDIV").childElementCount; |  
<b>Element property / method</b>: <em>element</em>.childNodes | <b>Element property / method</b> that returns a nodelist of an element's child nodes. |  | <em>element</em>.childNodes | const nodeList = document.body.childNodes; |  
<b>Element property / method</b>: <em>element</em>.children | <b>Element property / method</b> that returns an htmlcollection of an element's child elements. |  | <em>element</em>.children | const collection = document.body.children; |  
<b>Element property / method</b>: <em>element</em>.classList | <b>Element property / method</b> that returns the class name(s) of an element. |  | <em>element</em>.classList | const list = element.classList;<br/> list.add("myStyle"); |  
<b>Element property / method</b>: classname | <b>Element property / method</b> that sets or returns the value of the class attribute of an element. |  |  | element.className = "myStyle"; |  
<b>Element property / method</b>: <em>element</em>.click() | <b>Element property / method</b> that simulates a mouse-click on an element. |  | <em>element</em>.click() | &lt;input type="checkbox" id="myCheck" onmouseover="myFunction()";<br/><br/> &lt;script&gt;<br/> function myFunction() {<br/>  document.getElementById("myCheck").click();<br/> } <br/> &lt;/script&gt; |  
<b>Element property / method</b>: <em>element</em>.clientHeight | <b>Element property / method</b> that returns the height of an element, including padding. |  | <em>element</em>.clientHeight | const element = document.getElementById("myDIV");<br/> let text = "clientHeight: " + element.clientHeight + "px&lt;br&gt;";<br/> text += "clientWidth: " + element.clientWidth + "px"; |  
<b>Element property / method</b>: <em>element</em>.clientLeft | <b>Element property / method</b> that returns the width of the left border of an element. |  | <em>element</em>.clientLeft | const elmnt = document.getElementById("myDIV");<br/> let text = "Border top width: " + elmnt.clientTop + "px&lt;br&gt;";<br/> text += "Border left width: " + elmnt.clientLeft + "px"; |  
<b>Element property / method</b>: <em>element</em>.clientTop | <b>Element property / method</b> that returns the width of the top border of an element. |  | <em>element</em>.clientTop | const element = document.getElementById("myDIV");<br/> let text = "clientTop: " + element.clientTop + "px&lt;br&gt;";<br/> text += "clientLeft: " + element.clientLeft + "px"; |  
<b>Element property / method</b>: <em>element</em>.clientWidth | <b>Element property / method</b> that returns the width of an element, including padding. |  | <em>element</em>.clientWidth | const element = document.getElementById("myDIV");<br/> let text = "clientHeight: " + element.clientHeight + "px&lt;br&gt;";<br/> text += "clientWidth: " + element.clientWidth + "px"; |  
<b>Element property / method</b>: <i>node</i>.cloneNode(<i>deep</i>) | <b>Element property / method</b> that clones an element. |  | <i>node</i>.cloneNode(<i>deep</i>) | const node = document.getElementById("myList2").lastChild;<br/> const clone = node.cloneNode(true);<br/><br/> document.getElementById("myList1").appendChild(clone); |  
<b>Element property / method</b>: <i>element</i>.closest(<i>selectors</i>) | <b>Element property / method</b> that searches the dom tree for the closest element that matches a css selector. |  | <i>element</i>.closest(<i>selectors</i>) | const element = document.getElementById("myElement");<br/> const closest = element.closest(".container"); |  
<b>Element property / method</b>: <i>node</i>.compareDocumentPosition(<i>node</i>) | <b>Element property / method</b> that compares the document position of two elements. |  | <i>node</i>.compareDocumentPosition(<i>node</i>) | const p1 = document.getElementById("p1");<br/> const p2 = document.getElementById("p2");<br/>  let position = p1.compareDocumentPosition(p2); |  
<b>Element property / method</b>: <i>node</i>.contains(<i>node</i>) | <b>Element property / method</b> that returns true if a node is a descendant of a node. |  | <i>node</i>.contains(<i>node</i>) | const span = document.getElementById("mySPAN");<br/> let answer = document.getElementById("myDIV").contains(span); |  
<b>Element property / method</b>: contenteditable | <b>Element property / method</b> that sets or returns whether the content of an element is editable or not. |  |  | &lt;p id="myP" contenteditable="true"&gt;I am editable.&lt;/p&gt; |  
<b>Element property / method</b>: dir | <b>Element property / method</b> that sets or returns the value of the dir attribute of an element. |  |  | document.getElementById("myP").dir = "rtl"; |  
<b>Element property / method</b>: firstchild | <b>Element property / method</b> that returns the first child node of an element. |  |  | document.getElementById("myList").firstChild.innerHTML; |  
<b>Element property / method</b>: <em>element</em>.firstElementChild | <b>Element property / method</b> that returns the first child element of an element. |  | <em>element</em>.firstElementChild | let text = element.firstElementChild.innerHTML; |  
<b>Element property / method</b>: <em>element</em>.focus() | <b>Element property / method</b> that gives focus to an element. |  | <em>element</em>.focus() | document.getElementById("myAnchor").focus(); |  
<b>Element property / method</b>: <i>element</i>.getAttribute(<em>name</em>) | <b>Element property / method</b> that returns the value of an element's attribute. |  | <i>element</i>.getAttribute(<em>name</em>) | let text = element.getAttribute("class"); |  
<b>Element property / method</b>: <i>element</i>.getAttributeNode(<em>name</em>) | <b>Element property / method</b> that returns an attribute node. |  | <i>element</i>.getAttributeNode(<em>name</em>) | const element = document.getElementsByTagName("H1")[0];<br/> let text = element.getAttributeNode("class").value; |  
<b>Element property / method</b>: <em>element</em>.getBoundingClientRect() | <b>Element property / method</b> that returns the size of an element and its position relative to the viewport. |  | <em>element</em>.getBoundingClientRect() | const rect = element.getBoundingClientRect(); |  
<b>Element property / method</b>: <em>element</em>.getElementsByClassName(<em>classname</em>) | <b>Element property / method</b> that returns a collection of child elements with a given class name. |  | <em>element</em>.getElementsByClassName(<em>classname</em>) | const list = document.getElementsByClassName("example")[0];<br/> list.getElementsByClassName("child")[0].innerHTML = "Milk";<br/> |  
<b>Element property / method</b>: <em>element</em>.getElementsByTagName(<em>tagname</em>) | <b>Element property / method</b> that returns a collection of child elements with a given tag name. |  | <em>element</em>.getElementsByTagName(<em>tagname</em>) | const list = document.getElementsByTagName("UL")[0];<br/> list.getElementsByTagName("li")[0].innerHTML = "Milk";<br/> |  
<b>Element property / method</b>: <em>element</em>.hasAttribute(<em>name</em>) | <b>Element property / method</b> that returns true if an element has a given attribute. |  | <em>element</em>.hasAttribute(<em>name</em>) | let answer = myButton.hasAttribute("onclick"); |  
<b>Element property / method</b>: <i>element</i>.hasAttributes() | <b>Element property / method</b> that returns true if an element has any attributes. |  | <i>element</i>.hasAttributes() | let answer = document.body.hasAttributes(); |  
<b>Element property / method</b>: <i>element</i>.hasChildNodes() | <b>Element property / method</b> that returns true if an element has any child nodes. |  | <i>element</i>.hasChildNodes() | let answer = element.hasChildNodes(); |  
<b>Element property / method</b>: id | <b>Element property / method</b> that sets or returns the value of the id attribute of an element. |  |  | let id = document.getElementsByTagName("a")[0].id; |  
<b>Element property / method</b>: innerhtml | <b>Element property / method</b> that sets or returns the content of an element. |  |  | let html = document.getElementById("myP").innerHTML; |  
<b>Element property / method</b>: innertext | <b>Element property / method</b> that sets or returns the text content of a node and its descendants. |  |  | let text = element.innerText; |  
<b>Element property / method</b>: insertadjacentelement() | <b>Element property / method</b> that inserts a new html element at a position relative to an element. |  |  | const span = document.getElementById("mySpan");<br/> const h2 = document.getElementById("myH2");<br/> h2.insertAdjacentElement("afterend", span); |  
<b>Element property / method</b>: insertadjacenthtml() | <b>Element property / method</b> that inserts an html formatted text at a position relative to an element. |  |  | const h2 = document.getElementById("myH2");<br/> let html = "&lt;p&gt;My new paragraph.&lt;/p&gt;";<br/> h2.insertAdjacentHTML("afterend", html); |  
<b>Element property / method</b>: insertadjacenttext() | <b>Element property / method</b> that inserts text into a position relative to an element. |  |  | const h2 = document.getElementById("myH2");<br/> let text = "My inserted text";<br/> h2.insertAdjacentText("afterend", text); |  
<b>Element property / method</b>: <i>element</i>.insertBefore(<i>new, existing</i>) | <b>Element property / method</b> that inserts a new child node before an existing child node. |  | <i>element</i>.insertBefore(<i>new, existing</i>) | const newNode = document.createElement("li");<br/> const textNode = document.createTextNode("Water");<br/> newNode.appendChild(textNode);<br/><br/> const list = document.getElementById("myList");<br/> list.insertBefore(newNode, list.children[0]); |  
<b>Element property / method</b>: <em>element</em>.isContentEditable | <b>Element property / method</b> that returns true if an element's content is editable. |  | <em>element</em>.isContentEditable | let answer = document.getElementById("myP").isContentEditable; |  
<b>Element property / method</b>: isdefaultnamespace() | <b>Element property / method</b> that returns true if a given namespaceuri is the default. |  |  | let answer = element.isDefaultNamespace("http://www.w3.org/1999/xhtml"); |  
<b>Element property / method</b>: isequalnode() | <b>Element property / method</b> that checks if two elements are equal. |  |  | var item1 = document.getElementById("myList1").firstChild;<br/>  var item2 = document.getElementById("myList2").firstChild;<br/>  var x =  item1.isEqualNode(item2); |  
<b>Element property / method</b>: <i>node</i>.isSameNode(<i>node</i>) | <b>Element property / method</b> that checks if two elements are the same node. |  | <i>node</i>.isSameNode(<i>node</i>) | var item1 = document.getElementById("myList1");      // An &lt;ul&gt; element with id="myList"<br/>  var item2 = document.getElementsByTagName("UL")[0];  // The first &lt;ul&gt; element in the document<br/>  var x =  item1.isSameNode(item2); |  
<b>Element property / method</b>: <i>element</i>.isSupported(<i>feature</i>,<i> version</i>) | <b>Element property / method</b> that deprecated. |  | <i>element</i>.isSupported(<i>feature</i>,<i> version</i>) | element.isSupported("Core", "2.0"); |  
<b>Element property / method</b>: lang | <b>Element property / method</b> that sets or returns the value of the lang attribute of an element. |  |  | let text = element.lang; |  
<b>Element property / method</b>: lastchild | <b>Element property / method</b> that returns the last child node of an element. |  |  | document.getElementById("myList").lastChild.innerHTML; |  
<b>Element property / method</b>: <em>element</em>.lastElementChild | <b>Element property / method</b> that returns the last child element of an element. |  | <em>element</em>.lastElementChild | const element = document.getElementById("myList")<br/> let html = element.lastElementChild.innerHTML; |  
<b>Element property / method</b>: <i>element</i>.matches(<i>selectors</i>) | <b>Element property / method</b> that returns true if an element is matched by a given css selector. |  | <i>element</i>.matches(<i>selectors</i>) | const element = document.getElementById("demo");<br/> let answer = element.matches(".container"); |  
<b>Element property / method</b>: <em>element</em>.namespaceURI | <b>Element property / method</b> that returns the namespace uri of an element. |  | <em>element</em>.namespaceURI | let uri = element.namespaceURI; |  
<b>Element property / method</b>: nextsibling | <b>Element property / method</b> that returns the next node at the same node tree level. |  |  | document.getElementById("item1").nextSibling.innerHTML; |  
<b>Element property / method</b>: <em>element</em>.nextElementSibling | <b>Element property / method</b> that returns the next element at the same node tree level. |  | <em>element</em>.nextElementSibling | let text = element.nextElementSibling.innerHTML; |  
<b>Element property / method</b>: nodename | <b>Element property / method</b> that returns the name of a node. |  |  | document.getElementById("myP").nodeName; |  
<b>Element property / method</b>: <em>node</em>.nodeType | <b>Element property / method</b> that returns the node type of a node. |  | <em>node</em>.nodeType | var x = document.getElementById("myP").nodeType; |  
<b>Element property / method</b>: nodevalue | <b>Element property / method</b> that sets or returns the value of a node. |  |  | document.getElementsByTagName("BUTTON")[0].childNodes[0].nodeValue; |  
<b>Element property / method</b>: <i>node</i>.normalize() | <b>Element property / method</b> that joins adjacent text nodes and removes empty text nodes in an element. |  | <i>node</i>.normalize() | document.getElementById("demo").normalize(); |  
<b>Element property / method</b>: <em>element</em>.offsetHeight | <b>Element property / method</b> that returns the height of an element, including padding, border and scrollbar. |  | <em>element</em>.offsetHeight | const elmnt = document.getElementById("myDIV");<br/> let text = "Height with padding and border: " + elmnt.offsetHeight + "px&lt;br&gt;";<br/> text += "Width with padding and border: " + elmnt.offsetWidth + "px"; |  
<b>Element property / method</b>: <em>element</em>.offsetWidth | <b>Element property / method</b> that returns the width of an element, including padding, border and scrollbar. |  | <em>element</em>.offsetWidth | const elmnt = document.getElementById("myDIV");<br/> let text = "Height with padding and border: " + elmnt.offsetHeight + "px&lt;br&gt;";<br/> text += "Width with padding and border: " + elmnt.offsetWidth + "px"; |  
<b>Element property / method</b>: offsetleft | <b>Element property / method</b> that returns the horizontal offset position of an element. |  |  | const element = document.getElementById("myDIV");<br/> let pos = element.offsetLeft; |  
<b>Element property / method</b>: <em>element</em>.offsetParent | <b>Element property / method</b> that returns the offset container of an element. |  | <em>element</em>.offsetParent | let node = document.getElementById("myDIV").offsetParent; |  
<b>Element property / method</b>: offsettop | <b>Element property / method</b> that returns the vertical offset position of an element. |  |  | const element = document.getElementById("myDIV");<br/> let pos = element.offsetTop; |  
<b>Element property / method</b>: outerhtml | <b>Element property / method</b> that sets or returns the content of an element (including the start tag and the end tag). |  |  | document.getElementsByTagName("h2")[0] = "&lt;h3&gt;Changed!&lt;/h3&gt;"; |  
<b>Element property / method</b>: outertext | <b>Element property / method</b> that sets or returns the outer text content of a node and its descendants. |  |  | document.getElementById("myH1").outerText = "Changed content!"; |  
<b>Element property / method</b>: <em>node</em>.ownerDocument | <b>Element property / method</b> that returns the root element (document object) for an element. |  | <em>node</em>.ownerDocument | var x = document.getElementById("myP").ownerDocument.nodeType; |  
<b>Element property / method</b>: <em>element</em>.parentNode | <b>Element property / method</b> that returns the parent node of an element. |  | <em>element</em>.parentNode | let name = document.getElementById("myLI").parentNode.nodeName; |  
<b>Element property / method</b>: <em>node</em>.parentElement | <b>Element property / method</b> that returns the parent element node of an element. |  | <em>node</em>.parentElement | var x = document.getElementById("myLI").parentElement.nodeName; |  
<b>Element property / method</b>: previoussibling | <b>Element property / method</b> that returns the previous node at the same node tree level. |  |  | document.getElementById("item2").previousSibling.innerHTML; |  
<b>Element property / method</b>: <em>element</em>.previousElementSibling | <b>Element property / method</b> that returns the previous element at the same node tree level. |  | <em>element</em>.previousElementSibling | let text = element.previousElementSibling.innerHTML; |  
<b>Element property / method</b>: <em>element</em>.querySelector(<em>CSS selectors</em>) | <b>Element property / method</b> that returns the first child element that matches a css selector(s). |  | <em>element</em>.querySelector(<em>CSS selectors</em>) | var x = document.getElementById("myDIV");<br/>x.querySelector(".example").innerHTML = "Hello World!"; |  
<b>Element property / method</b>: <em>element</em>.querySelectorAll(<em>CSS selectors</em>) | <b>Element property / method</b> that returns all child elements that matches a css selector(s). |  | <em>element</em>.querySelectorAll(<em>CSS selectors</em>) | // Get the element with id="myDIV" (a div), then get all elements inside div with class="example"<br/>var x = document.getElementById("myDIV").querySelectorAll(".example");  <br/><br/>  // Set the background color of the first element with class="example" (index 0) in div<br/>  x[0].style.backgroundColor = "red"; |  
<b>Element property / method</b>: remove() | <b>Element property / method</b> that removes an element from the dom. |  |  | const element = document.getElementById("demo");<br/> element.remove(); |  
<b>Element property / method</b>: <em>element</em>.removeAttribute(<em>name</em>) | <b>Element property / method</b> that removes an attribute from an element. |  | <em>element</em>.removeAttribute(<em>name</em>) | document.getElementsByTagName("H1")[0].removeAttribute("class"); |  
<b>Element property / method</b>: <em>element</em>.removeAttributeNode(<em>node</em>) | <b>Element property / method</b> that removes an attribute node, and returns the removed node. |  | <em>element</em>.removeAttributeNode(<em>node</em>) | const element = document.getElementsByTagName("H1")[0];<br/> <br/> const attr = element.getAttributeNode("class");<br/> element.removeAttributeNode(attr); |  
<b>Element property / method</b>: removechild() | <b>Element property / method</b> that removes a child node from an element. |  |  | const list = document.getElementById("myList");<br/> list.removeChild(list.firstElementChild); |  
<b>Element property / method</b>: <em>element</em>.removeEventListener(<em>event</em>, <em>function</em>, <em>capture</em>) | <b>Element property / method</b> that removes an event handler that has been attached with the addeventlistener() method. |  | <em>element</em>.removeEventListener(<em>event</em>, <em>function</em>, <em>capture</em>) | myDIV.removeEventListener("mousemove", myFunction); |  
<b>Element property / method</b>: <i>node</i>.replaceChild(<i>newnode</i>,<i> oldnode</i>) | <b>Element property / method</b> that replaces a child node in an element. |  | <i>node</i>.replaceChild(<i>newnode</i>,<i> oldnode</i>) | const newNode = document.createTextNode("Water");<br/> const element = document.getElementById("myList").children[0];<br/><br/> element.replaceChild(newNode, element.childNodes[0]);<br/> |  
<b>Element property / method</b>: <em>element</em>.scrollHeight | <b>Element property / method</b> that returns the entire height of an element, including padding. |  | <em>element</em>.scrollHeight | const element = document.getElementById("content");<br/> let x = element.scrollHeight;<br/> let y = element.scrollWidth; |  
<b>Element property / method</b>: <em>element</em>.scrollIntoView(<em>align</em>) | <b>Element property / method</b> that scrolls the an element into the visible area of the browser window. |  | <em>element</em>.scrollIntoView(<em>align</em>) | const element = document.getElementById("content");<br/> element.scrollIntoView(); |  
<b>Element property / method</b>: scrollleft | <b>Element property / method</b> that sets or returns the number of pixels an element's content is scrolled horizontally. |  |  | const element = document.getElementById("myDIV");<br/> let x = elmnt.scrollLeft;<br/> let y = elmnt.scrollTop; |  
<b>Element property / method</b>: scrolltop | <b>Element property / method</b> that sets or returns the number of pixels an element's content is scrolled vertically. |  |  | const element = document.getElementById("myDIV");<br/> let x = elmnt.scrollLeft;<br/> let y = elmnt.scrollTop; |  
<b>Element property / method</b>: <em>element</em>.scrollWidth | <b>Element property / method</b> that returns the entire width of an element, including padding. |  | <em>element</em>.scrollWidth | const element = document.getElementById("content");<br/> let x = element.scrollHeight;<br/> let y = element.scrollWidth; |  
<b>Element property / method</b>: <em>element</em>.setAttribute(<em>name</em>, <em>value</em>) | <b>Element property / method</b> that sets or changes an attribute's value. |  | <em>element</em>.setAttribute(<em>name</em>, <em>value</em>) | element.setAttribute("class", "democlass"); |  
<b>Element property / method</b>: <em>element</em>.setAttributeNode(<em>node</em>) | <b>Element property / method</b> that sets or changes an attribute node. |  | <em>element</em>.setAttributeNode(<em>node</em>) | const attr = document.createAttribute("class");<br/> attr.value = "democlass";<br/> <br/> const h1 = document.getElementsByTagName("H1")[0];<br/> h1.setAttributeNode(attr); |  
<b>Element property / method</b>: style | <b>Element property / method</b> that sets or returns the value of the style attribute of an element. |  |  | document.getElementById("myH1").style.color = "red"; |  
<b>Element property / method</b>: tabindex | <b>Element property / method</b> that sets or returns the value of the tabindex attribute of an element. |  |  | document.getElementById("myAnchor1").tabIndex = "3";<br/> document.getElementById("myAnchor2").tabIndex = "2";<br/> document.getElementById("myAnchor3").tabIndex = "1"; |  
<b>Element property / method</b>: <em>element</em>.tagName | <b>Element property / method</b> that returns the tag name of an element. |  | <em>element</em>.tagName | let name = document.getElementById("demo").tagName; |  
<b>Element property / method</b>: textcontent | <b>Element property / method</b> that sets or returns the textual content of a node and its descendants. |  |  | let text = element.textContent; |  
<b>Element property / method</b>: title | <b>Element property / method</b> that sets or returns the value of the title attribute of an element. |  |  | let title = element.title; |  
