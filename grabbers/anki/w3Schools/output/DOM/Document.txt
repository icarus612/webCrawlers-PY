<b>Document property / method</b>: document.activeElement | <b>Document property / method</b> that returns the currently focused element in the document. |  | document.activeElement | const element = document.activeElement.tagName; |  
<b>Document property / method</b>: document.addEventListener(<em>event</em>, <em>function</em>, <em>Capture</em>) | <b>Document property / method</b> that attaches an event handler to the document. |  | document.addEventListener(<em>event</em>, <em>function</em>, <em>Capture</em>) | document.addEventListener("click", myFunction);<br/><br/> function myFunction() {<br/>   document.getElementById("demo").innerHTML = "Hello World";<br/>  }<br/> |  
<b>Document property / method</b>: document.adoptNode(<em>node</em>) | <b>Document property / method</b> that adopts a node from another document. |  | document.adoptNode(<em>node</em>) | const frame = document.getElementById("myFrame");<br/> const h1 = frame.contentWindow.document.getElementsByTagName("H1")[0];<br/> const node = document.adoptNode(h1); |  
<b>Document property / method</b>: document.anchors | <b>Document property / method</b> that deprecated. |  | document.anchors | let num = document.anchors.length; |  
<b>Document property / method</b>: document.applets | <b>Document property / method</b> that deprecated. |  | document.applets | let num = document.applets.length; |  
<b>Document property / method</b>: <em>document</em>.baseURI | <b>Document property / method</b> that returns the absolute base uri of a document. |  | <em>document</em>.baseURI | let base = document.baseURI; |  
<b>Document property / method</b>: body | <b>Document property / method</b> that sets or returns the document's body (the <body> element). |  |  | const myBody = document.body.innerHTML; |  
<b>Document property / method</b>: document.charset | <b>Document property / method</b> that deprecated. |  | document.charset | encoding = document.charset; |  
<b>Document property / method</b>: document.characterSet | <b>Document property / method</b> that returns the character encoding for the document. |  | document.characterSet | encoding = document.characterSet; |  
<b>Document property / method</b>: document.close() | <b>Document property / method</b> that closes the output stream previously opened with document.open(). |  | document.close() | document.open();<br/> document.write("&lt;h1&gt;Hello World&lt;/h1&gt;");<br/> document.write("&lt;p&gt;Open owerwrites original content.&lt;/p&gt;");<br/> document.close(); |  
<b>Document property / method</b>: cookie | <b>Document property / method</b> that returns all name/value pairs of cookies in the document. |  |  | let allCookies = document.cookie; |  
<b>Document property / method</b>: document.createAttribute(<i>name</i>) | <b>Document property / method</b> that creates an attribute node. |  | document.createAttribute(<i>name</i>) | // Create a class attribute:<br/> const att = document.createAttribute("class");<br/> <br/> // Set the value of the class attribute:<br/> att.value = "democlass";<br/> <br/> // Add the class attribute to the first h1:<br/> const h1 = document.getElementsByTagName("H1")[0];<br/> h1.setAttributeNode(att); |  
<b>Document property / method</b>: document.createComment(<i>text</i>) | <b>Document property / method</b> that creates a comment node with the specified text. |  | document.createComment(<i>text</i>) | const comment = document.createComment("My comments");<br/> document.body.appendChild(comment); |  
<b>Document property / method</b>: document.createDocumentFragment() | <b>Document property / method</b> that creates an empty documentfragment node. |  | document.createDocumentFragment() | const fruits = ["Banana", "Orange", "Mango"];<br/> <br/> // Create a document fragment:<br/> const dFrag = document.createDocumentFragment();<br/> <br/> // Add li elements to the fragment:<br/> for (let x in fruits) {<br/>   const li = document.createElement('li');<br/>   li.textContent = fruits[x];<br/>   dFrag.appendChild(li);<br/> }<br/> <br/> // Add fragment to a list:<br/>  document.getElementById('myList').appendChild(dFrag); |  
<b>Document property / method</b>: document.createElement(<em>type</em>) | <b>Document property / method</b> that creates an element node. |  | document.createElement(<em>type</em>) | const para = document.createElement("p");<br/> para.innerText = "This is a paragraph";<br/> document.body.appendChild(para); |  
<b>Document property / method</b>: document.createEvent(<em>type</em>) | <b>Document property / method</b> that creates a new event. |  | document.createEvent(<em>type</em>) | const ev = document.createEvent("MouseEvent");<br/> ev.initMouseEvent("mouseover", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);<br/> <br/> document.getElementById("myDiv").dispatchEvent(ev); |  
<b>Document property / method</b>: document.createTextNode(<em>text</em>) | <b>Document property / method</b> that creates a text node. |  | document.createTextNode(<em>text</em>) | let textNode = document.createTextNode("Hello World"); document.body.appendChild(textNode); |  
<b>Document property / method</b>: document.defaultView | <b>Document property / method</b> that returns the window object associated with a document, or null if none is available.. |  | document.defaultView | const view = document.defaultView; |  
<b>Document property / method</b>: document.designMode | <b>Document property / method</b> that controls whether the entire document should be editable or not.. |  | document.designMode | document.designMode; |  
<b>Document property / method</b>: document.doctype | <b>Document property / method</b> that returns the document type declaration associated with the document. |  | document.doctype | const doctypeObj = document.doctype.name; |  
<b>Document property / method</b>: document.documentElement | <b>Document property / method</b> that returns the document element of the document (the <html> element). |  | document.documentElement | document.documentElement.nodeName; |  
<b>Document property / method</b>: document.documentMode | <b>Document property / method</b> that deprecated. |  | document.documentMode | document.documentMode; |  
<b>Document property / method</b>: documenturi | <b>Document property / method</b> that sets or returns the location of the document. |  |  | let uri = document.documentURI; |  
<b>Document property / method</b>: document.domain | <b>Document property / method</b> that returns the domain name of the server that loaded the document. |  | document.domain | let myDomain = document.domain; |  
<b>Document property / method</b>: document.domConfig | <b>Document property / method</b> that deprecated. |  | document.domConfig | document.domConfig; |  
<b>Document property / method</b>: document.embeds | <b>Document property / method</b> that returns a collection of all <embed> elements the document. |  | document.embeds | let num = document.embeds.length; |  
<b>Document property / method</b>: document.execCommand(<em>command</em>, <em>showUI</em>, <em>value</em>) | <b>Document property / method</b> that deprecated. |  | document.execCommand(<em>command</em>, <em>showUI</em>, <em>value</em>) | document.execCommand("bold"); |  
<b>Document property / method</b>: document.forms | <b>Document property / method</b> that returns a collection of all <form> elements in the document. |  | document.forms | let num = document.forms.length; |  
<b>Document property / method</b>: document.getElementById(<em>elementID</em>) | <b>Document property / method</b> that returns the element that has the id attribute with the specified value. |  | document.getElementById(<em>elementID</em>) | document.getElementById("demo"); |  
<b>Document property / method</b>: document.getElementsByClassName(<em>classname</em>) | <b>Document property / method</b> that returns an htmlcollection containing all elements with the specified class name. |  | document.getElementsByClassName(<em>classname</em>) | const collection = document.getElementsByClassName("example"); |  
<b>Document property / method</b>: document.getElementsByName(<i>name</i>) | <b>Document property / method</b> that returns an live nodelist containing all elements with the specified name. |  | document.getElementsByName(<i>name</i>) | let elements = document.getElementsByName("fname"); |  
<b>Document property / method</b>: document.getElementsByTagName(<em>tagname</em>) | <b>Document property / method</b> that returns an htmlcollection containing all elements with the specified tag name. |  | document.getElementsByTagName(<em>tagname</em>) | const collection = document.getElementsByTagName("li"); |  
<b>Document property / method</b>: document.hasFocus() | <b>Document property / method</b> that returns a boolean value indicating whether the document has focus. |  | document.hasFocus() | if (document.hasFocus()) {<br/>   text = "The document has focus.";<br/> } else {<br/>   text = "The document does NOT have focus.";<br/> } |  
<b>Document property / method</b>: document.head | <b>Document property / method</b> that returns the <head> element of the document. |  | document.head | document.head.tagName; |  
<b>Document property / method</b>: document.images | <b>Document property / method</b> that returns a collection of all <img> elements in the document. |  | document.images | document.images.length; |  
<b>Document property / method</b>: document.implementation | <b>Document property / method</b> that returns the domimplementation object that handles this document. |  | document.implementation | document.implementation.hasFeature("DOM", "1.0"); |  
<b>Document property / method</b>: document.importNode(<em>node</em>,<em> deep</em>) | <b>Document property / method</b> that imports a node from another document. |  | document.importNode(<em>node</em>,<em> deep</em>) | const frame = document.getElementsById("myFrame");<br/> const h1 = frame.contentWindow.document.getElementsByTagName("H1")[0];<br/> const node = document.importNode(h1, true); |  
<b>Document property / method</b>: document.inputEncoding | <b>Document property / method</b> that deprecated. |  | document.inputEncoding | let encoding = document.inputEncoding; |  
<b>Document property / method</b>: document.lastModified | <b>Document property / method</b> that returns the date and time the document was last modified. |  | document.lastModified | let text = document.lastModified; |  
<b>Document property / method</b>: document.links | <b>Document property / method</b> that returns a collection of all <a> and <area> elements in the document that have a href attribute. |  | document.links | let numb = document.links.length; |  
<b>Document property / method</b>: document.normalize() | <b>Document property / method</b> that removes empty text nodes, and joins adjacent nodes. |  | document.normalize() | document.normalize(); |  
<b>Document property / method</b>: document.normalizeDocument() | <b>Document property / method</b> that deprecated. |  | document.normalizeDocument() |  |  
<b>Document property / method</b>: open() | <b>Document property / method</b> that opens an html output stream to collect output from document.write(). |  |  | document.open();<br/>document.write("&lt;h1&gt;Hello World&lt;/h1&gt;");<br/>  document.close();<br/> |  
<b>Document property / method</b>: document.querySelector(<em>CSS selectors</em>) | <b>Document property / method</b> that returns the first element that matches a specified css selector(s) in the document. |  | document.querySelector(<em>CSS selectors</em>) | document.querySelector("p"); |  
<b>Document property / method</b>: document.querySelectorAll(<em>CSS selectors</em>) | <b>Document property / method</b> that returns a static nodelist containing all elements that matches a specified css selector(s) in the document. |  | document.querySelectorAll(<em>CSS selectors</em>) | document.querySelectorAll(".example"); |  
<b>Document property / method</b>: document.readyState | <b>Document property / method</b> that returns the (loading) status of the document. |  | document.readyState | document.readyState; |  
<b>Document property / method</b>: document.referrer | <b>Document property / method</b> that returns the url of the document that loaded the current document. |  | document.referrer | document.referrer; |  
<b>Document property / method</b>: document.removeEventListener(<em>event</em>, <em>function</em>, <em>capture</em>) | <b>Document property / method</b> that removes an event handler from the document (that has been attached with the addeventlistener() method). |  | document.removeEventListener(<em>event</em>, <em>function</em>, <em>capture</em>) | document.removeEventListener("mousemove", myFunction); |  
<b>Document property / method</b>: renamenode() | <b>Document property / method</b> that deprecated. |  |  |  |  
<b>Document property / method</b>: document.scripts | <b>Document property / method</b> that returns a collection of <script> elements in the document. |  | document.scripts | document.scripts.length; |  
<b>Document property / method</b>: stricterrorchecking | <b>Document property / method</b> that deprecated. |  |  | document.strictErrorChecking; |  
<b>Document property / method</b>: title | <b>Document property / method</b> that sets or returns the title of the document. |  |  | document.title; |  
<b>Document property / method</b>: document.URL | <b>Document property / method</b> that returns the full url of the html document. |  | document.URL | document.URL; |  
<b>Document property / method</b>: document.write(<i>exp1, exp2, ..., expN</i>) | <b>Document property / method</b> that writes html expressions or javascript code to a document. |  | document.write(<i>exp1, exp2, ..., expN</i>) | document.write("Hello World!");<br/> |  
<b>Document property / method</b>: document.writeln(<i>exp1, exp2, ..., expN</i>) | <b>Document property / method</b> that same as write(), but adds a newline character after each statement. |  | document.writeln(<i>exp1, exp2, ..., expN</i>) | document.writeln("Hello World!");<br/> document.writeln("Have a nice day!");<br/> |  
