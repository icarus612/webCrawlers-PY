<b>Console method</b>: console.assert(<em>expression</em>, <em>message</em>) | <b>Console method</b> that writes an error message to the console if a assertion is false. |  | console.assert(<em>expression</em>, <em>message</em>) | console.assert(x + y == 11, "Expression returned false"); |  
<b>Console method</b>: console.clear() | <b>Console method</b> that clears the console. |  | console.clear() | console.clear(); |  
<b>Console method</b>: console.count(<em>label</em>) | <b>Console method</b> that logs the number of times that this particular call to count() has been      called. |  | console.count(<em>label</em>) | for (let i = 0; i &lt; 5; i++) {<br/>   console.count();<br/> } |  
<b>Console method</b>: console.error(<em>message</em>) | <b>Console method</b> that outputs an error message to the console. |  | console.error(<em>message</em>) | console.error("You made a mistake"); |  
<b>Console method</b>: console.group(<em>label</em>) | <b>Console method</b> that creates a new inline group in the console. this indents following      console messages by an additional level, until console.groupend() is called. |  | console.group(<em>label</em>) | console.log("Hello world!");<br/>console.group();<br/>console.log("Hello again,  this time inside a group!"); |  
<b>Console method</b>: console.groupCollapsed(<em>label</em>) | <b>Console method</b> that creates a new inline group in the console. however, the new group is      created collapsed. the user will need to use the disclosure button to expand      it. |  | console.groupCollapsed(<em>label</em>) | console.log("Hello world!");<br/>console.groupCollapsed();<br/>console.log("Hello again,    this time inside a collapsed group!"); |  
<b>Console method</b>: console.groupEnd() | <b>Console method</b> that exits the current inline group in the console. |  | console.groupEnd() | console.log("Hello world!");<br/>console.group();<br/>console.log("Hello again,    this time inside a group!");<br/><strong>console.groupEnd();</strong><br/>console.log("and we    are back."); |  
<b>Console method</b>: console.info(<em>message</em>) | <b>Console method</b> that outputs an informational message to the console. |  | console.info(<em>message</em>) | console.info("Hello world!"); |  
<b>Console method</b>: console.log(<em>message</em>) | <b>Console method</b> that outputs a message to the console. |  | console.log(<em>message</em>) | console.log("Hello world!"); |  
<b>Console method</b>: console.table(<em>tabledata, tablecolumns</em>) | <b>Console method</b> that displays tabular data as a table. |  | console.table(<em>tabledata, tablecolumns</em>) | console.table(["Audi", "Volvo", "Ford"]); |  
<b>Console method</b>: console.time(<em>label</em>) | <b>Console method</b> that starts a timer (can track how long an operation takes). |  | console.time(<em>label</em>) | console.time();<br/>for (let i = 0; i &lt; 100000; i++) {<br/>  // some code<br/>}<br/> console.timeEnd(); |  
<b>Console method</b>: console.timeEnd(<em>label</em>) | <b>Console method</b> that stops a timer that was previously started by console.time(). |  | console.timeEnd(<em>label</em>) | console.time();<br/>for (let i = 0; i &lt; 100000; i++) {<br/>  // some code<br/>}<br/> console.timeEnd(); |  
<b>Console method</b>: console.trace(<em>label</em>) | <b>Console method</b> that outputs a stack trace to the console. |  | console.trace(<em>label</em>) | function myFunction() {<br/>  myOtherFunction();<br/>}<br/><br/>function    myOtherFunction() {<br/>  console.trace();<br/>} |  
<b>Console method</b>: console.warn(<em>message</em>) | <b>Console method</b> that outputs a warning message to the console. |  | console.warn(<em>message</em>) | console.warn("This is a warning!"); |  
